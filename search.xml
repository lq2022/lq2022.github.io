<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式</title>
      <link href="/2020/08/05/list1/design-patterns/"/>
      <url>/2020/08/05/list1/design-patterns/</url>
      
        <content type="html"><![CDATA[<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>根据设计模式的参考书 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 中所提到的，总共有 23 种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。下面我主要列举分析较常用的设计模式。</p><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p><p>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p><p>包含模式</p><ul><li>简单工厂模式（Simple Factory）<br>重要程度：4 （5为满分）</li><li>工厂方法模式（Factory Method）<br>重要程度：5</li><li>抽象工厂模式（Abstract Factory）<br>重要程度：5</li><li>建造者模式（Builder）<br>重要程度：2</li><li>原型模式（Prototype）<br>重要程度：3</li><li>单例模式（Singleton）<br>重要程度：4</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>结构型模式(Structural Pattern)描述如何将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。</p><p>结构型模式可以分为类结构型模式和对象结构型模式：</p><p>类结构型模式关心类的组合，由多个类可以组合成一个更大的<br>系统，在类结构型模式中一般只存在继承关系和实现关系。 - 对象结构型模式关心类与对象的组合，通过关联关系使得在一 个类中定义另一个类的实例对象，然后通过该对象调用其方法。 根据“合成复用原则”，在系统中尽量使用关联关系来替代继 承关系，因此大部分结构型模式都是对象结构型模式。</p><p>包含模式</p><ul><li>适配器模式(Adapter)<br>重要程度：4</li><li>桥接模式(Bridge)<br>重要程度：3</li><li>组合模式(Composite)<br>重要程度：4</li><li>装饰模式(Decorator)<br>重要程度：3</li><li>外观模式(Facade)<br>重要程度：5</li><li>享元模式(Flyweight)<br>重要程度：1</li><li>代理模式(Proxy)<br>重要程度：4</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。</p><p>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</p><p>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</p><p>行为型模式分为类行为型模式和对象行为型模式两种：</p><p>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。<br>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。</p><p>包含模式</p><ul><li>职责链模式(Chain of Responsibility) 重要程度：3</li><li>命令模式(Command)<br>重要程度：4</li><li>解释器模式(Interpreter)<br>重要程度：1</li><li>迭代器模式(Iterator)<br>重要程度：5</li><li>中介者模式(Mediator)<br>重要程度：2</li><li>备忘录模式(Memento)<br>重要程度：2</li><li>观察者模式(Observer)<br>重要程度：5</li><li>状态模式(State)<br>重要程度：3</li><li>策略模式(Strategy)<br>重要程度：4</li><li>模板方法模式(Template Method)<br>重要程度：3</li><li>访问者模式(Visitor)<br>重要程度：1</li></ul><h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul><li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/index.html">图说设计模式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书评：《少有人走的路——心智成熟的旅程》</title>
      <link href="/2020/08/04/list1/road-less-traveled/"/>
      <url>/2020/08/04/list1/road-less-traveled/</url>
      
        <content type="html"><![CDATA[<p>偶然看到编程随想关于《少有人走的路——心智成熟的旅程》的<a href="https://program-think.blogspot.com/2012/06/book-review-road-less-traveled.html">书评</a>，对我帮助很大。随想的书评很精彩，我本想不再写，但出于对「费曼学习法」的实践，于是有了这篇。</p><h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>下面稍微介绍一下本书的大致内容。</p><h3 id="第1部分：自律"><a href="#第1部分：自律" class="headerlink" title="第1部分：自律"></a>第1部分：自律</h3><blockquote><p>所谓自律，就是主动要求自己以积极的态度去承受痛苦，解决问题。</p></blockquote><p>我认为这是本书最重要的部分——因为建立【自律能力】，是达成心智成熟的关键。</p><p>缺乏“自律”的人，会一味地逃避问题，逃避痛苦。但是这样只是掩盖问题，而不能根本解决问题。那些逃避痛苦的人，最终会招致更大的痛苦；而建立了“自律”的人，就能够正视问题，直面痛苦，以积极的态度去解决问题。</p><p>那么，如何建立自律能力捏？作者指出了4个要点：</p><ul><li><p>推迟满足感</p><blockquote><p>就是不贪图暂时的安逸，先苦后甜，重新设置人生快乐与痛苦的次序：首先，面对问题并感受痛苦；然后，解决问题并享受更大的快乐。在充满问题和痛苦的人生中，推迟满足感是唯一可行的生活方式</p></blockquote></li><li><p>承担责任、</p><blockquote><p>不能及时解决自己面临的问题，这些问题就会像山一样横亘在我们心中，阻碍心灵的成长和心智的成熟。很多人显然忽略了这个道理。我们必须面对属于自己的问题，这是解决问题的基本前提。</p></blockquote></li><li><p>尊重事实</p><blockquote><p>逃避现实的痛苦是人类的天性，只有通过自律，我们才能逐渐克服现实的痛苦，及时修改自己的地图，逐步成长。我们必须忠于事实，尽管这会带来暂时的痛苦，但远比沉湎于虚假的舒适中要好。我们必须忍受暂时的不适感，追求事实而不是假象，并承受这一过程的痛苦。要让心灵获得成长，心智走向成熟，就要竭尽全力，不惜一切代价，完全忠于事实。</p></blockquote><blockquote><p>完全忠于事实的生活到底意味着什么呢？首先，<strong>它意味着我们要用一生的时间进行不间断地严格地自我反省</strong>。我们通过自身与外界的接触来认识世界。我们不仅要观察世界本身，也要对观察世界的主体（我们自身）进行反省。</p></blockquote></li><li><p>保持平衡</p><blockquote><p>你既要学会推迟满足感，先苦后甜，把眼光放远，同时又要尽可能过好当前的生活，让人生的快乐多于痛苦。换句话说，自律本身需要把持得当，我称之为“保持平衡”，这也是自律的第四条原则</p></blockquote></li></ul><h3 id="第2部分：爱"><a href="#第2部分：爱" class="headerlink" title="第2部分：爱"></a>第2部分：爱</h3><blockquote><p>爱，是为了促进自己和他人心智成熟，而不断拓展自我界限，实现自我完善的一种意愿。</p></blockquote><p>本书的第二部分，重点谈“爱”这个话题。（请注意，书中谈及的“爱”，是广义的。不要一看到这个字眼，就想到“性爱”）</p><p>“爱”这个词汇，虽然人人都听说过，但是很多人（包括成年人）对“爱”的含义有片面的理解甚至错误的理解。</p><p>举个“中国式父母”的例子：</p><ul><li>孩子5岁，我给你报了少年宫</li><li>孩子7岁，我给你报了奥数班</li><li>孩子15岁，我给你报了重点中学</li><li>孩子18岁，我给你报了高考突击班</li><li>孩子23岁，我给你报了公务员</li><li>孩子32岁，我给你报了《非诚勿扰》</li><li>……</li></ul><p>如果你问这类父母这么做的动机，他们多半会说：因为他们【爱】自己的孩子。</p><p>但其实捏，这些父母的上述举动，并不是源于真正的“爱”，而是源于【控制欲】——他们希望掌控孩子的成长轨迹。“爱”只不过是这类父母冠冕堂皇的借口而已。</p><p>那么，到底什么是真正的爱？请看书。</p><h3 id="第3部分：成长与宗教"><a href="#第3部分：成长与宗教" class="headerlink" title="第3部分：成长与宗教"></a>第3部分：成长与宗教</h3><p>谈到科学和宗教的关系，作者的如下几个观点，列出来供大伙儿参考：</p><blockquote><p>科学家成熟的标志之一就是能意识到，和其它任何宗教一样，科学也可能流于教条主义。我坚定地认为，对于别人教给我们的一切，包括通常的文化观念以及一切陈规旧习，采取冷静和怀疑的态度，才是使心智成熟不可或缺的元素。科学本身也很容易成为文化偶像，我们亦应保持怀疑的态度。</p></blockquote><blockquote><p>我们的思想可能很成熟，成熟到足以摆脱对上帝的信仰；与此同时，我们也可能成熟到去信仰上帝。</p></blockquote><h3 id="第4部分：神奇的力量"><a href="#第4部分：神奇的力量" class="headerlink" title="第4部分：神奇的力量"></a>第4部分：神奇的力量</h3><p>前面三部分提到的心智，都是“意识”层面的。最后这部分会讲到“潜意识”的问题以及“潜意识”和“意识”之间的互动。接着作者还谈到了两种力量（心灵的力量和政治的力量）。心灵的力量用于控制自己，政治的力量用于控制他人。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>为了免去大伙儿买纸版书的开销和找电子书的麻烦，我特地放上此书的 EPUB 版。想下载的同学，请访问我分享的<a href="http://dwz.date/bPkw">电子书资源</a>的 list1 文件夹”。</p><p>看完之后，如果有啥心得体会，可以到本文留言。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设定个人发展目标和计划</title>
      <link href="/2020/07/22/list1/personal-plan/"/>
      <url>/2020/07/22/list1/personal-plan/</url>
      
        <content type="html"><![CDATA[<p>大部分人从来没有【明确】地设定自己的发展目标，每天都是得过且过。等到几年过去了，才发现自己这些年啥也没学会，还是老样子，然后就感叹时光飞逝、岁月如梭。</p><p>因此，今天我们来聊一下如何设定个人发展目标。（如果你平时已经很善于定期设定个人发展目标并执行得很好，恭喜你，那么本帖子你可以略过）</p><h2 id="个人发展目标"><a href="#个人发展目标" class="headerlink" title="个人发展目标"></a>个人发展目标</h2><p>先说说什么是【个人发展目标】。顾名思义，就是和你个人的职业发展有关的目标，包括知识、技能、工作岗位等都可以被设定为个人发展目标。（由于本博客主要关注IT方面，因此我会以个人的技术发展为例来说明，但是这些方法也适用于其他方面，例如个人财务目标）</p><h2 id="个人发展目标的三种类型"><a href="#个人发展目标的三种类型" class="headerlink" title="个人发展目标的三种类型"></a>个人发展目标的三种类型</h2><p>我一般会把个人发展目标分为“长、中、短”三种类型，以此来对应不同的时间阶段。不管是哪种类型的目标，都要做到如下：</p><ol><li>要把目标设置得【难易适中】。太容易的目标对自己的成长帮助不够大；而太难的目标则容易中途放弃或者超出时间（导致打乱计划）。</li><li>设定的目标要尽量容易评估（否则到时候连自己也搞不清楚到底目标算不算已达到）。</li></ol><h3 id="短期目标"><a href="#短期目标" class="headerlink" title="短期目标"></a>短期目标</h3><p>先说说短期目标。短期目标的时间跨度大约在几个星期到一个季度之间。短期目标要定得比较具体，便于自己评估目标是否达成。</p><p>下面举几个短期目标的例子：“在本月读完《Thinking in C++》”、“在本月熟悉 Spring 框架”、“在这2个月用 C++ 写一个五子棋游戏”……</p><h3 id="中期目标"><a href="#中期目标" class="headerlink" title="中期目标"></a>中期目标</h3><p>然后说说中期目标。中期目标的时间跨度大约在几个季度到1-2年。中期目标比短期目标更抽象，且必须是短期目标的有机结合。</p><p>比如有个短期目标是“本周看完《Dive into Python》”，那么对应的中期目标可以是“1年内成为熟练的 Python 程序员”。</p><h3 id="长期目标"><a href="#长期目标" class="headerlink" title="长期目标"></a>长期目标</h3><p>最后谈谈长期目标。长期目标同样也必须和中级目标沾边，它的层次当然更高，时间跨度大约在5年以上。</p><p>而且长期目标一般不会关系到具体的XX语言、XX平台等，倒是经常和职业岗位有一定的关联。比如“5-7年内成为技术总监”、“5年内成为公司产品的架构师”等。</p><h2 id="个人发展计划"><a href="#个人发展计划" class="headerlink" title="个人发展计划"></a>个人发展计划</h2><p>当你把3种目标都设定好之后，就形成了【个人发展计划】。既然是计划，你就得在每一个阶段结束时自己总结一下，评估一下该目标的完成情况好不好，有什么收获、有什么经验教训。必要的话还需对尚未开始的后续目标进行一下调整。定期回顾还有一个好处，就是能获得一种满足感，从而有利于你坚持完整个计划。</p><p>关于“设定个人发展目标和计划”，今天就聊这么多。不管你是尚未毕业的在校生，还是已经工作多年的老员工（亡羊补牢还不晚），【从现在开始】，按照我上面说的，赶紧计划一下吧！</p><blockquote><p>本文转载自<a href="https://program-think.blogspot.com/2009/01/3.html">编程随想</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>私人手册</title>
      <link href="/2020/07/16/private-manual/"/>
      <url>/2020/07/16/private-manual/</url>
      
        <content type="html"><![CDATA[<h2 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>常用命令</p><pre class="line-numbers language-shell"><code class="language-shell">set password "123456" ex 30ttl password #剩余生存时间，存在但没设置返回-1hmset stu2 name wang age 18 gender female tel 13566778899 #批量设置hgetall stu2 lpush nums 1,2,3 #如果有多个 value 值，那么各个 value 值按从左到右的顺序依次插入到表头,列表为3,2,1lrange nums 0 -1 #指定区间的元素lpop nums #移除最左边的元素并展示，3sadd a b c #将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略。keys * #查看所有数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>摘要: 1.3.1 对文章进行投票; 2.2使用redis实现购物车; </p><p>看2,4.4,4.5,5章</p><p>第8章细地说明了如何构建一个类似Twitter的社交网站,并给出了包括流API在内的整个网站后端实现。</p><p>第10章 1.一般来说，使用Redis Sentinel的目的就是为了向主服务器属下的从服务器提供自动故<br>障转移服务。</p><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><ul><li><a href="https://www.kancloud.cn/jiangguowu/kfjsdkfjskd/718253">Redis操作</a></li><li><a href="http://www.macrozheng.com/#/reference/redis_cluster">docker-redis集群</a></li><li><a href="https://github.com/jackfrued/Python-100-Days/blob/master/Day36-40/39-40.NoSQL%E5%85%A5%E9%97%A8.md#mongodb%E6%A6%82%E8%BF%B0">MongoDB概述</a></li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>常用</p><ol><li>生成文件/预览/上传：<code>hexo g/s/d</code></li></ol><p>不常用</p><ol><li>新建文章：<code>hexo new post &quot;x-x&quot;</code> </li><li><a href="https://hexo.io/zh-cn/docs/asset-folders">hexo官方文档地址</a></li><li><a href="https://hexo.io/themes/">主题列表</a> - <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">matery文档</a> 或 Journal</li></ol><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>常用</p><ol><li>改文章特色图片：在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</li></ol><p>不常用</p><ol><li>SSH免密deploy：找到根目录下config.yml,将repository改成ssh格式即可。</li><li>图片引用：图片放置于 <code>source/images</code> 文件夹中，然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。</li><li>改 Banner 图：搜 bg-cover-content.ejs 文件</li><li>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VS Code使用记录</title>
      <link href="/2020/06/26/vs-code/"/>
      <url>/2020/06/26/vs-code/</url>
      
        <content type="html"><![CDATA[<p>最近由于痴迷于写 Markdown 文档，我爱上了 Visual Studio Code 这款编辑器，这篇文章将为你它的种种用途。为了方便以下简称 VS Code。</p><h2 id="用于写-Markdown"><a href="#用于写-Markdown" class="headerlink" title="用于写 Markdown"></a>用于写 Markdown</h2><p>VS Code 绝对是写 Markdown 的最佳编辑器，只是很多人不知道。网上众推的 Typora 编辑器不支持多标签浏览而且有时会卡顿，比较适合非程序员使用。</p><p>只需安装如图所示插件即可享用。上面那个扩展内置了一些快捷键及目录自动生成，还是挺方便的。下方扩展让实时预览以 GitHub 的风格显示，必备。<br><img src="http://theliuqi.oss-cn-shenzhen.aliyuncs.com/notes/20200624/214800550.png" alt="mark"><br>后来我动手写了一些 Snippet 来提高效率，比如我输入 md 再按回车就会生成我想要的 Markdown 文件的基本结构，这个技巧强烈推荐使用。</p><h2 id="用于项目提交"><a href="#用于项目提交" class="headerlink" title="用于项目提交"></a>用于项目提交</h2><p>VS Code 内置了控制台和对 Git 的支持，使得它几乎媲美 IDE。对于一名程序员来说，使用控制台和 Git 可说是最常用的功能之一，内置它们极大地提升了我的效率。具体用法可参考<a href="#参考阅读">官方文档</a>，此外，虽然纯英文文档一开始让人有不舒服的感觉，我还是建议要阅读官方文档，如果挺过去了，我们能获得英文水平、视野及自信心的提升，还是很划算的。</p><h2 id="用于编程"><a href="#用于编程" class="headerlink" title="用于编程"></a>用于编程</h2><p>建议安装官方推荐的扩展并查阅<a href="#参考阅读">官方文档</a>。VS Code 不是最好的编辑器，但它是最全能的编辑器。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ol><li><a href="https://code.visualstudio.com/docs">VS Code 官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制实战</title>
      <link href="/2020/05/27/mysql-master-slave/"/>
      <url>/2020/05/27/mysql-master-slave/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>刚开始是打算在Docker环境下开2个mysql实例来测试的,但遇到难以解决的bug,因此先在正常环境下搭建.</p><p>我用了虚拟机和vps两个centos7系统, mysql都是5.5.62版本.</p><h2 id="正常搭建"><a href="#正常搭建" class="headerlink" title="正常搭建"></a>正常搭建</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>在vps的mysql配置文件里增加如下信息:<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-binserver-id<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>改完重启.</li><li>在本地虚拟机的mysql配置文件里增加如下信息:<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment" spellcheck="true">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span>log-bin<span class="token operator">=</span>mysql-slave-binserver-id<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>改完也要重启.</li><li>创建数据同步用户：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-slave-binserver-id<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>创建数据同步用户:  <pre class="line-numbers language-bash"><code class="language-bash">CREATE USER <span class="token string">'slave'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span>GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="token string">'slave'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>查看主数据库状态：<code>show master status;</code>,记下<code>File</code>及<code>Position</code>的值以备用.</li><li>在从数据库中配置主从复制：<pre class="line-numbers language-bash"><code class="language-bash">change master to master_host<span class="token operator">=</span><span class="token string">'45.78.23.24'</span>, master_user<span class="token operator">=</span><span class="token string">'slave'</span>, master_password<span class="token operator">=</span><span class="token string">'123456'</span>, master_port<span class="token operator">=</span>3306, master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000241'</span>, master_log_pos<span class="token operator">=</span>1229, master_connect_retry<span class="token operator">=</span>30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>开启主从同步：<code>start slave;</code></li><li>查看主从同步状态：<code>show slave status;</code>,这俩参数为Yes说明成功了.<br><img src="slave-io.jpg" alt="slave-io"></li><li>我们可以在主数据库建个数据库,然后发现从数据库也出现了.</li><li>最后将slave账号删掉,使用<code>Navicat</code>会比较快捷.<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>在搭建过程中我遇到了<code>Slave_IO_Running: No</code>的问题,百思不得其解,通过查看mysql错误日志,<br><img src="slave-error.jpg" alt="slave-error">发现是mysql并没有更新server_id,于是执行<pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">set</span> global server_id<span class="token operator">=</span>2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#此处的数值和my.cnf里设置的一样就行</span>mysql<span class="token operator">></span> slave start<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>,便解决了问题.</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章</p><ul><li><a href="http://www.macrozheng.com/#/reference/mysql_master_slave">Docker-mysql主从复制</a></li><li><a href="https://blog.csdn.net/u013421629/article/details/78793966">csdn读写分离</a> </li><li><a href="https://www.jianshu.com/p/1ac435a6510e">MySQL读写分离最佳实践</a></li><li><a href="https://segmentfault.com/a/1190000003716617">读写分离-多赞</a></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>查容器IP,命令如下: </p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> <span class="token comment" spellcheck="true"># 查看所有容器</span>docker inspect -f <span class="token string">'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> ContainerID  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文技术文档的写作规范</title>
      <link href="/2020/05/06/document-style-guide/"/>
      <url>/2020/05/06/document-style-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>层级: 标题分为四级; 一级标题：文章的标题; 二级标题：文章主要部分的大标题.</li><li>避免同级标题只有一个</li><li>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）. 如<strong>（1）xx</strong></li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li>示例: 一部容量为 16 GB 的智能手机</li><li>避免使用长句: 不包含任何标点符号的单个句子，长度尽量保持在 20 个字以内</li><li>外文缩写可以使用半角圆点(<code>.</code>)表示缩写,如: U.S.A.</li><li>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）</li><li>英文书名或电影名改用中文表达时，双引号应改为书名号。</li><li>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。如: “American Association of Physicists in Medicine”</li></ul><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><ul><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li><li>段落开头不要留出空白字符。</li><li>如果是全篇转载，请在全文开头显著位置注明出处，并链接至原文。</li></ul><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ul><li>数值为千位以上，应添加千分号, 如: 公司的实收资本为 ￥1,258,000 人民币</li></ul><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><ul><li>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔, 不使用逗号.</li><li>中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接. 如: 我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</li><li>分号（<code>；</code>）表示复句内部并列分句之间的停顿。</li><li>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>）</li><li>补充说明时，使用全角圆括号（）</li><li>应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）</li><li>数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>）</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>文件名建议只使用小写字母，不使用大写字母。如: reading-list.md</li></ul><blockquote><p>本文部分参考自阮一峰的<a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Document-Style </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Docker命令</title>
      <link href="/2020/05/05/docker-commands/"/>
      <url>/2020/05/05/docker-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p>Docker 是一个开源的应用容器引擎, 让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上。使用Docker可以更方便低打包、测试以及部署应用程序。</p><h3 id="Docker-环境安装"><a href="#Docker-环境安装" class="headerlink" title="Docker 环境安装"></a>Docker 环境安装</h3><p><strong>建议要体验Docker, 应采用虚拟机+ centos7 + Xshell 结合使用最佳.</strong></p><ul><li>安装yum-utils: <code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></li><li>为yum源添加docker仓库位置：<code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li><li>安装docker: <code>yum install docker-ce</code></li><li>启动docker:  <code>systemctl start docker</code></li><li>开机自动启动docker: <code>systemctl enable docker</code> # 我之前遇到”Is the docker daemon running?”的问题,运行该命令并重启即可解决</li></ul><h3 id="Docker-镜像常用命令"><a href="#Docker-镜像常用命令" class="headerlink" title="Docker 镜像常用命令"></a>Docker 镜像常用命令</h3><p>搜索镜像: <code>docker search mysql</code> # 要通过docker hub来搜索支持的版本。</p><p>下载镜像: <code>docker pull mysql:5.7</code></p><p>列出镜像: <code>docker images</code></p><p>指定名称删除镜像（强制）: <code>docker rmi -f java:8</code></p><p>删除所有没有引用的镜像: </p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi `docker images <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制删除所有镜像: <code>docker rmi -f $(docker images)</code></p><h3 id="Docker-容器常用命令"><a href="#Docker-容器常用命令" class="headerlink" title="Docker 容器常用命令"></a>Docker 容器常用命令</h3><p>新建并启动容器: <code>docker run -p 80:80 --name nginx -d nginx:1.17.0</code> # -d选项：表示后台运行; –name选项：指定运行后容器的名字为nginx,之后可以通过名字来操作容器; -p选项：指定端口映射，格式为：hostPort:containerPort</p><p>列出所有容器: <code>docker ps -a</code></p><p>停止容器: <code>docker stop $ContainerName/$ContainerId</code></p><p>强制停止容器: <code>docker kill $ContainerName/$ContainerId</code></p><p>启动已停止的容器: <code>docker start $ContainerName/$ContainerId</code></p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>先查询容器的pid:</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker inspect --format <span class="token string">"{{.State.Pid}}"</span> <span class="token variable">$ContainerName</span>/<span class="token variable">$ContainerId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据容器的pid进入容器: <code>nsenter --target &quot;$pid&quot; --mount --uts --ipc --net --pid</code></li></ul><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><ul><li>删除指定容器: <code>docker rm $ContainerName(或者$ContainerId)</code></li><li>按名称删除容器:<pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> `docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> php-* <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>强制删除所有容器: <code>docker rm -f $(docker ps -a -q)</code></li></ul><p>动态查看容器日志: <code>docker logs $ContainerName(或者$ContainerId) -f</code></p><p>查看容器的IP地址: </p><pre class="line-numbers language-bash"><code class="language-bash">docker inspect --format <span class="token string">'{{ .NetworkSettings.IPAddress }}'</span> <span class="token variable">$ContainerName</span>/<span class="token variable">$ContainerId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改容器的启动方式: <code>docker container update --restart=always $ContainerName</code></p><p>同步宿主主机时间到容器: <code>docker cp /etc/localtime $ContainerName(或者$ContainerId):/etc/</code></p><p>查看指定容器情况: <code>docker stats $ContainerName/$ContainerId</code> # -a表所有</p><p>查看Docker磁盘使用情况: <code>docker system df</code></p><p>进入Docker容器内部的bash: <code>docker exec -it $ContainerName /bin/bash</code></p><h3 id="修改Docker镜像的存放位置"><a href="#修改Docker镜像的存放位置" class="headerlink" title="修改Docker镜像的存放位置"></a>修改Docker镜像的存放位置</h3><ul><li>查看Docker镜像的存放位置: <code>docker info | grep &quot;Docker Root Dir&quot;</code></li><li>关闭Docker服务: <code>systemctl stop docker</code></li><li>移动目录到目标路径：<code>mv /var/lib/docker /mydata/docker</code></li><li>建立软连接: <code>ln -s /mydata/docker /var/lib/docker</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门</title>
      <link href="/2020/04/27/git/"/>
      <url>/2020/04/27/git/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我觉得只要自己觉得舒服,不论是用Git客户端还是Soucetree等三方软件都是ok的.</p><p>本文主要是简单介绍Git及Git常用操作,如对Git完全不了解,请移步<a href="https://zh.wikipedia.org/wiki/Git">维基百科</a>.</p><h1 id="认识Git"><a href="#认识Git" class="headerlink" title="认识Git"></a>认识Git</h1><h2 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h2><p>Git 有三种状态，你的文件可能处于其中之一：</p><ol><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><p>由此引入 Git 项目的三个工作区域的概念：<strong>Git 仓库(.git directoty)</strong>、<strong>工作目录(Working Directory)</strong> 以及 <strong>暂存区域(Staging Area)</strong> 。</p><p><strong>基本的 Git 工作流程如下：</strong></p><ol><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li></ol><h1 id="Git使用快速入门"><a href="#Git使用快速入门" class="headerlink" title="Git使用快速入门"></a>Git使用快速入门</h1><h2 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h2><p>有两种取得 Git 项目仓库的方法。</p><ol><li><p>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</p></li><li><p>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url]</code> directoryname</p></li></ol><h2 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h2><pre><code>  1. **检测当前文件状态** : `git status`  2. **提出更改（把它们添加到暂存区**）：`git add filename` (针对特定文件)、`git add *`(所有文件)、`git add *.txt`（支持通配符，所有 .txt 文件）  3. **忽略文件**：`.gitignore` 文件  4. **提交更新:** `git commit -m &quot;代码提交信息&quot;` （每次准备提交前，先用 `git status` 看下，是不是都已暂存起来了， 然后再运行提交命令 `git commit`）  5. **跳过使用暂存区域更新的方式** : `git commit -a -m &quot;代码提交信息&quot;`。 `git commit` 加上 `-a` 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 `git add` 步骤。  6. **移除文件** ：`git rm filename` （从暂存区域移除，然后提交。）  7. **对文件重命名** ：`git mv README.md README`(这个命令相当于`mv README.md README`、`git rm README.md`、`git add README` 这三条命令的集合)</code></pre><h2 id="推送改动到远程仓库"><a href="#推送改动到远程仓库" class="headerlink" title="推送改动到远程仓库"></a>推送改动到远程仓库</h2><ul><li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<code>git remote add origin &lt;server&gt;</code> ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样<code>git remote add origin https://github.com/theliuqi/test.git</code></p></li><li><p>将这些改动提交到远端仓库：<code>git push origin master</code> (可以把 <em>master</em> 换成你想要推送的任何分支)</p><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p></li></ul><h2 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h2><ul><li>将 test 重命名位 test1：<code>git remote rename test test1</code></li><li>移除远程仓库 test1:<code>git remote rm test1</code></li></ul><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p><code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。</p><p><strong>可以添加一些参数来查看自己希望看到的内容：</strong></p><p>只看某个人的提交记录：</p><pre class="line-numbers language-shell"><code class="language-shell">git log --author=bob<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p><pre class="line-numbers language-console"><code class="language-console">git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消暂存的文件</p><pre class="line-numbers language-console"><code class="language-console">git reset filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>撤消对文件的修改:</p><pre><code>git checkout -- filename</code></pre><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><pre><code>git fetch origingit reset --hard origin/master</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p>我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。</p><p>创建一个名字叫做 test 的分支</p><pre class="line-numbers language-console"><code class="language-console">git branch test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）</p><pre class="line-numbers language-console"><code class="language-console">git checkout test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以直接这样创建分支并切换过去(上面两条命令的合写)</p><pre class="line-numbers language-console"><code class="language-console">git checkout -b test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到主分支</p><pre><code>git checkout master</code></pre><p>合并分支(可能会有冲突)</p><pre class="line-numbers language-java"><code class="language-java"> git merge test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把新建的分支删掉</p><pre><code>git branch -d test1</code></pre><p>将分支推送到远端仓库（推送成功后其他人可见）：</p><pre><code>git push origin </code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2020/04/21/list1/container-with-most-water/"/>
      <url>/2020/04/21/list1/container-with-most-water/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">题目</a></h1><p>求最大水容器，给定一个包含正整数的数组，a1，a2，…，an。每个元素都可以呈现成一个点(i，ai)。过每个点，做垂直于x轴的垂线，得到对应交点(0，ai)。(0，ai)和(i，ai)构成一条之前。每条直线两两组合，构成一个储水容器，找到存储量最大的那个容器。</p><p><strong>举例：</strong></p><pre class="line-numbers language-stylus"><code class="language-stylus">Input：<span class="token punctuation">[</span>1,3,5<span class="token punctuation">]</span><span class="token punctuation">(</span>0,1<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>1,1<span class="token punctuation">)</span><span class="token punctuation">(</span>0,3<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>2,3<span class="token punctuation">)</span><span class="token punctuation">(</span>0,5<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>3,5<span class="token punctuation">)</span>Output：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入是[1,3,5]，那么一共有三条垂直与x轴的直线，直线两两组合，面积最大为3。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最大盛水量取决于两边中较短的那条边，而且如果将较短的边换为更短边的话，盛水量只会变少。所以我们可以用两个头尾指针，计算出当前最大的盛水量后，将较短的边向中间移，因为我们想看看能不能把较短的边换长一点。这样一直计算到左边大于右边为止就行了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        area_tmp <span class="token operator">=</span> <span class="token number">0</span>        area_max <span class="token operator">=</span> <span class="token number">0</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            min_height <span class="token operator">=</span> min<span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> min_height            <span class="token keyword">if</span> area_tmp <span class="token operator">></span> area_max<span class="token punctuation">:</span>                area_max <span class="token operator">=</span> area_tmp            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> area_max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">?</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>area_tmp <span class="token operator">></span> area_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                area_max <span class="token operator">=</span> area_tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> area_max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><strong>PHP</strong></h2><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[] $height     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">&lt;</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$min_height</span> <span class="token operator">=</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$right</span> <span class="token operator">-</span> <span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$min_height</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$area_tmp</span> <span class="token operator">></span> <span class="token variable">$area_max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token variable">$area_tmp</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$left</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$right</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$area_max</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Linux命令</title>
      <link href="/2019/05/02/linux-commands/"/>
      <url>/2019/05/02/linux-commands/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=3932159&auto=1&height=66"></iframe></div><h3 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h3><ul><li>输出系统中各个服务的状态：<code>systemctl list-units --type=service</code></li><li>查看服务的运行状态：<code>systemctl status firewalld</code></li><li>关闭服务: <code>systemctl stop firewalld</code></li><li>重新启动服务: <code>systemctl restart firewalld</code></li><li>重新载入配置信息而不中断服务: <code>systemctl reload firewalld</code></li><li>禁止服务开机自启动：<code>systemctl disable firewalld</code></li><li>设置服务开机自启动：<code>systemctl enable firewalld</code></li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ol><li><p><code>cd -</code><strong>：</strong> 切换到上一个操作所在目录</p></li><li><p><code>ll</code>: ll是ls -l的别名，ll命令可以看到该目录下的所有目录和文件的详细信息</p></li><li><p><code>pwd</code>: 获取目前所在工作目录的绝对路径</p></li><li><p>显示或修改系统时间与日期: <code>date &#39;+%Y-%m-%d %H:%M:%S&#39;</code></p></li><li><p>用于设置用户密码: <code>pass root</code></p></li><li><p>改变用户身份（切换到超级用户): <code>su -</code></p></li><li><p>用于清除屏幕信息: <code>clear</code></p></li><li><p>显示指定命令的帮助信息: <code>man ls</code></p></li><li><p>查询系统处于什么运行级别: <code>who -r</code> </p></li><li><p>显示目前登录到系统的用户: <code>who -buT</code></p></li><li><p>显示系统内存状态（单位MB): <code>free -m</code></p></li><li><p>查看sshd进程的运行动态：<code>ps -ef | grep sshd</code></p></li><li><p>查看即时活跃的进程，类似Windows的任务管理器: <code>top</code></p></li><li><p>创建目录: <code>mkdir</code></p></li><li><p>用于文件过长时分页查看文件内容 每页10行查看boot.log文件: <code>more -c -10 /var/log/boot.log</code></p></li><li><p>查看Linux启动日志文件文件，并标明行号：<code>cat -Ab /var/log/boot.log</code></p></li><li><p><strong><code>touch 文件名称</code>:</strong> 创建文件</p></li><li><p><code>rm -rf 目录</code>: 删除目录及其子目录</p></li><li><p><strong><code>cp -r 目录名称 目录拷贝的目标位置</code>：</strong> 拷贝目录（改），-r代表递归拷贝</p></li><li><p><strong><code>mv 目录名称 新目录名称</code>：</strong> 重命名/剪切</p></li><li><p><strong><code>find 目录 参数</code>：</strong> 寻找目录（查）</p><ul><li><p>搜索etc目录下所有以sh开头的文件,参考<a href="https://man.linuxde.net/locate_slocate">locate</a>:<code>locate /etc/sh</code> 注: 使用yum install mlocate 安装locate命令,再运行updatedb</p></li><li><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件: <code>find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</code></p></li></ul></li></ol><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><ol><li>将/etc文件夹中的文件归档到文件etc.tar（并不会进行压缩): <code>tar -cvf /mydata/etc.tar /etc</code></li><li>用gzip压缩文件夹/etc中的文件到文件etc.tar.gz: <code>tar -zcvf /mydata/etc.tar.gz /etc</code></li><li>用bzip2压缩文件夹/etc到文件/etc.tar.bz2：<code>tar -jcvf /mydata/etc.tar.bz2 /etc</code></li><li>分页查看压缩包中内容（gzip）：<code>tar -ztvf /mydata/etc.tar.gz |more -c -10</code></li><li>解压文件到指定目录（gzip）：<code>tar -zxvf /mydata/etc.tar.gz -C /mydata/etc</code></li></ol><h3 id="磁盘和网络管理"><a href="#磁盘和网络管理" class="headerlink" title="磁盘和网络管理"></a>磁盘和网络管理</h3><ol><li>查看磁盘空间占用情况：<code>df -hT</code></li><li>查看当前目录下的文件及文件夹所占大小：<code>du -h --max-depth=1 ./*</code></li><li>显示当前网络接口状态: <code>ifconfig</code></li><li>查看当前路由信息：<code>netstat -rn</code></li><li>查看所有有效TCP连接：<code>netstat -an</code></li><li>查看系统中启动的监听服务：<code>netstat -tulnp</code></li><li>查看处于连接状态的系统资源信息：<code>netstat -atunp</code></li><li>从网络上下载文件: <code>wget</code></li></ol><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><ol><li>安装上传下载工具: <code>yum install -y lrzsz</code></li><li>上传文件: <code>rz</code></li><li>下载文件: <code>sz fileName</code></li></ol><h3 id="软件的安装与管理"><a href="#软件的安装与管理" class="headerlink" title="软件的安装与管理"></a>软件的安装与管理</h3><p>rpm</p><ul><li>安装软件包：rpm -ivh nginx-1.12.2-2.el7.x86_64.rpm</li><li>模糊搜索软件包：rpm -qa | grep nginx</li><li>精确查找软件包：rpm -qa nginx</li><li>查询软件包的安装路径：rpm -ql nginx-1.12.2-2.el7.x86_64</li><li>查看软件包的概要信息：rpm -qi nginx-1.12.2-2.el7.x86_64</li><li>验证软件包内容和安装文件是否一致：rpm -V nginx-1.12.2-2.el7.x86_64</li><li>更新软件包：rpm -Uvh nginx-1.12.2-2.el7.x86_64</li><li>删除软件包：rpm -e nginx-1.12.2-2.el7.x86_64</li></ul><p>yum</p><ul><li>安装软件包： yum install nginx</li><li>检查可以更新的软件包：yum check-update</li><li>更新指定的软件包：yum update nginx</li><li>在资源库中查找软件包信息：yum info nginx*</li><li>列出已经安装的所有软件包：yum info installed</li><li>列出软件包名称：yum list nginx*</li><li>模糊搜索软件包：yum search nginx</li></ul><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ul><li><a href="https://man.linuxde.net/">Linux命令大全web版</a></li><li><a href="https://pan.baidu.com/s/1tPDuG6NEahO0cwZtzTktOg">网盘</a>: 提取码：twsu, 目前包含<code>Linux命令大全手册.chm, 鸟哥的Linux私房菜.pdf</code></li><li>本文参考<a href="http://www.macrozheng.com/#/reference/linux">必备Linux命令</a>,<a href="https://snailclimb.gitee.io/javaguide/#/docs/operating-system/linux">Linux基础</a>. </li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
