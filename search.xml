<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>简历</title>
      <link href="/2021/03/07/21-3/resume/"/>
      <url>/2021/03/07/21-3/resume/</url>
      
        <content type="html"><![CDATA[<h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><ul><li>姓名: 刘琪</li><li>联系方式: 17621778414 或 <a href="mailto:914501855@qq.com">914501855@qq.com</a></li><li>GihHub: <a href="https://github.com/theliuqi">https://github.com/theliuqi</a></li><li>专业: 武汉工程大学应用化工技术专业</li><li>期望职位: PHP开发 或 Java开发 或 Golang开发</li></ul><h2 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h2><ul><li>Web框架(ThinkPHP 5.1/Laravel 6/Phalcon): 掌握</li><li>前端基础(HTML5/JQuery/Layui): 熟悉</li><li>Api 接口开发(Restful Api/Charles/Postman/Api文档): 掌握 </li><li>Linux + Nginx + MySQL + PHP 架构开发: 掌握</li><li>版本管理(SVN/Git): 掌握</li><li>Redis/MongoDB: 熟悉</li><li>微信应用开发/Docker/Python基础/Vue.js: 了解</li></ul><h2 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h2><ul><li>广州花钱约科技有限公司 PHP开发工程师 (2018.5 ~ 2021.1)</li><li>科乐得(武汉)股份有限公司 PHP开发工程师 (2017.7 ~ 2018.4)</li></ul><h2 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h2><h3 id="Todo项目"><a href="#Todo项目" class="headerlink" title="Todo项目"></a>Todo项目</h3><p>基于 Vuex + Vue.js + ant-design 技术开发完成的todo项目. </p><p>可实现添加, 删除, 改变状态, 统计, 切换事项等功能.</p><p>主要目的是对所学知识的一次实践, 详情及项目地址见: <a href="https://theliuqi.top/surl/voy">https://theliuqi.top/surl/voy</a></p><h3 id="小项目"><a href="#小项目" class="headerlink" title="小项目"></a>小项目</h3><ul><li>短网址<ul><li>对任一长网址生成其对应的短网址, 永久有效.</li><li>项目地址: <a href="https://theliuqi.top/surl">https://theliuqi.top/surl</a></li></ul></li><li>稍后阅读<ul><li>可设置用户名后得到专属的稍后阅读列表</li><li>项目地址: <a href="https://theliuqi.top/read">https://theliuqi.top/read</a></li></ul></li><li>Google 镜像<ul><li>利用 Nginx 反向代理使用 Google 搜索.</li><li>项目地址: <a href="https://so.theliuqi.top">https://so.theliuqi.top</a></li></ul></li></ul><h3 id="运宝购物返佣App"><a href="#运宝购物返佣App" class="headerlink" title="运宝购物返佣App"></a>运宝购物返佣App</h3><ul><li>负责集成极光推送</li><li>负责Api接口开发及迭代, 例如App首页商品展示, 猜你喜欢, 多平台搜索等接口.</li><li>负责管理后台用户, 订单, 充值的增删改查, 以及商品定时采集功能.</li><li>负责运营商后台数据展示及导出.</li><li>负责新需求的调研及讨论实现</li><li>采用Redis + opcache缓存, 开启 Gzip 压缩, 提高系统性能.</li></ul><h3 id="跨境商城"><a href="#跨境商城" class="headerlink" title="跨境商城"></a>跨境商城</h3><ul><li>跨境商城是一款基于ThinkPHP5, 采用前后端分离, 参照 TomTop 商城开发的PC端项目. </li><li>负责购物车、PayPal支付、订单及展示功能的开发.</li><li>采用 SVN 进行团队协作开发, 遵守约定的团队规范, 最终项目成功交付.</li></ul><h3 id="魅族商城"><a href="#魅族商城" class="headerlink" title="魅族商城"></a>魅族商城</h3><ul><li>魅族商城是一款基于 ThinkPHP3.2 + H-admin 技术参照魅族官方商城开发的简易商城项目. 项目地址：<a href="http://mz.theliuqi.top">http://mz.theliuqi.top</a></li><li>负责商城首页展示、注册登录、个人中心、商品详情、购物车、订单、后台会员管理、商品管理、权限管理、轮播图管理等模块，基本实现了一个完整的购物商城。</li></ul><h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>感谢您花时间阅读我的简历，期待能有机会和您共事。</p>]]></content>
      
      
      <categories>
          
          <category> 默认 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 默认 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-todo</title>
      <link href="/2021/03/07/21-3/vue-todo/"/>
      <url>/2021/03/07/21-3/vue-todo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习技术既要看文档, 还要实战 + 记录. 只有记录成文章, 不论过了多久, 我们仍能在最短时间熟悉它, 而且我们对知识的理解也会更近一步. </p><p>让我们开始基于Vuex完成todo项目吧. 项目地址: <a href="https://github.com/theliuqi/todo.git">https://github.com/theliuqi/todo.git</a></p><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><p>首先使用vue ui初始化一个使用vuex的项目,<br>然后打开public文件夹，创建一个list.json文件，文件代码如下：</p><pre><code>[    {        &quot;id&quot;: 0,        &quot;info&quot;: &quot;Racing car sprays burning fuel into crowd.&quot;,        &quot;done&quot;: false    },    {        &quot;id&quot;: 1,        &quot;info&quot;: &quot;Japanese princess to wed commoner.&quot;,        &quot;done&quot;: false    },    {        &quot;id&quot;: 2,        &quot;info&quot;: &quot;Australian walks 100km after outback crash.&quot;,        &quot;done&quot;: false    },    {        &quot;id&quot;: 3,        &quot;info&quot;: &quot;Man charged over missing wedding girl.&quot;,        &quot;done&quot;: false    },    {        &quot;id&quot;: 4,        &quot;info&quot;: &quot;Los Angeles battles huge wildfires.&quot;,        &quot;done&quot;: false    }]</code></pre><p>再接着，打开main.js,添加store.js的引入，如下：</p><pre><code>import Vue from &#39;vue&#39;import App from &#39;./App.vue&#39;import store from &#39;./store.js&#39;// 1. 导入 ant-design-vue 组件库import Antd from &#39;ant-design-vue&#39;// 2. 导入组件库的样式表import &#39;ant-design-vue/dist/antd.css&#39;Vue.config.productionTip = false// 3. 安装组件库Vue.use(Antd)new Vue({  store,  render: h =&gt; h(App)}).$mount(&#39;#app&#39;)</code></pre><p>再接着打开store.js，添加axios请求json文件获取数据的代码，如下：</p><pre><code>import Vue from &#39;vue&#39;import Vuex from &#39;vuex&#39;import axios from &#39;axios&#39;Vue.use(Vuex)export default new Vuex.Store({  state: {    //所有任务列表    list: [],    //文本输入框中的值    inputValue: &#39;AAA&#39;  },  mutations: {    initList(state, list) {      state.list = list    },    setInputValue(state,value){      state.inputValue = value    }  },  actions: {    getList(context) {      axios.get(&#39;/list.json&#39;).then(({ data }) =&gt; {        console.log(data);        context.commit(&#39;initList&#39;, data)      })    }  }})</code></pre><p>最后，代开App.vue文件，将store中的数据获取并展示：</p><pre><code>&lt;template&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;a-input placeholder=&quot;请输入任务&quot; class=&quot;my_ipt&quot; :value=&quot;inputValue&quot; @change=&quot;handleInputChange&quot; /&gt;    &lt;a-button type=&quot;primary&quot;&gt;添加事项&lt;/a-button&gt;    &lt;a-list bordered :dataSource=&quot;list&quot; class=&quot;dt_list&quot;&gt;      &lt;a-list-item slot=&quot;renderItem&quot; slot-scope=&quot;item&quot;&gt;        &lt;!-- 复选框 --&gt;        &lt;a-checkbox :checked=&quot;item.done&quot;&gt;{{item.info}}&lt;/a-checkbox&gt;        &lt;!-- 删除链接 --&gt;        &lt;a slot=&quot;actions&quot;&gt;删除&lt;/a&gt;      &lt;/a-list-item&gt;      &lt;!-- footer区域 --&gt;      &lt;div slot=&quot;footer&quot; class=&quot;footer&quot;&gt;        &lt;!-- 未完成的任务个数 --&gt;        &lt;span&gt;0条剩余&lt;/span&gt;        &lt;!-- 操作按钮 --&gt;        &lt;a-button-group&gt;          &lt;a-button type=&quot;primary&quot;&gt;全部&lt;/a-button&gt;          &lt;a-button&gt;未完成&lt;/a-button&gt;          &lt;a-button&gt;已完成&lt;/a-button&gt;        &lt;/a-button-group&gt;        &lt;!-- 把已经完成的任务清空 --&gt;        &lt;a&gt;清除已完成&lt;/a&gt;      &lt;/div&gt;    &lt;/a-list&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { mapState } from &#39;vuex&#39;export default {  name: &#39;app&#39;,  data() {    return {      // list:[]    }  },  created(){    // console.log(this.$store);    this.$store.dispatch(&#39;getList&#39;)  },  methods:{    handleInputChange(e){      // console.log(e.target.value)      this.$store.commit(&#39;setInputValue&#39;,e.target.value)    }  },  computed:{    ...mapState([&#39;list&#39;,&#39;inputValue&#39;])  }}&lt;/script&gt;&lt;style scoped&gt;#app {  padding: 10px;}.my_ipt {  width: 500px;  margin-right: 10px;}.dt_list {  width: 500px;  margin-top: 10px;}.footer {  display: flex;  justify-content: space-between;  align-items: center;}&lt;/style&gt;</code></pre><h2 id="完成添加事项"><a href="#完成添加事项" class="headerlink" title="完成添加事项"></a>完成添加事项</h2><p>首先，打开App.vue文件，给“添加事项”按钮绑定点击事件，编写处理函数</p><pre><code>//绑定事件&lt;a-button type=&quot;primary&quot; @click=&quot;addItemToList&quot;&gt;添加事项&lt;/a-button&gt;//编写事件处理函数methods:{    ......    addItemToList(){      //向列表中新增事项      if(this.inputValue.trim().length &lt;= 0){        return this.$message.warning(&#39;文本框内容不能为空&#39;)      }      this.$store.commit(&#39;addItem&#39;)    }  }</code></pre><p>然后打开store.js编写addItem</p><pre><code>export default new Vuex.Store({  state: {    //所有任务列表    list: [],    //文本输入框中的值    inputValue: &#39;AAA&#39;,    //下一个id    nextId:5  },  mutations: {    ........    //添加列表项    addItem(state){      const obj = {        id :state.nextId,        info: state.inputValue.trim(),        done:false      }      //将创建好的事项添加到数组list中      state.list.push(obj)      //将nextId值自增      state.nextId++      state.inputValue = &#39;&#39;    }  }  ......})</code></pre><h2 id="完成删除事项"><a href="#完成删除事项" class="headerlink" title="完成删除事项"></a>完成删除事项</h2><p>首先，打开App.vue文件，给“删除”按钮绑定点击事件，编写处理函数</p><pre><code>//绑定事件&lt;a slot=&quot;actions&quot; @click=&quot;removeItemById(item.id)&quot;&gt;删除&lt;/a&gt;//编写事件处理函数methods:{    ......    removeItemById(id){      //根据id删除事项      this.$store.commit(&#39;removeItem&#39;,id)    }  }</code></pre><p>然后打开store.js编写addItem</p><pre><code>export default new Vuex.Store({  ......  mutations: {    ........    removeItem(state,id){      //根据id删除事项数据      const index = state.list.findIndex( x =&gt; x.id === id )      // console.log(index);      if(index != -1) state.list.splice(index,1);    }  }  ......})</code></pre><h2 id="完成选中状态的改变"><a href="#完成选中状态的改变" class="headerlink" title="完成选中状态的改变"></a>完成选中状态的改变</h2><p>首先，打开App.vue文件，给“复选”按钮绑定点击事件，编写处理函数</p><pre><code>//绑定事件&lt;a-checkbox :checked=&quot;item.done&quot; @change=&quot;cbStateChanged(item.id,$event)&quot;&gt;{{item.info}}&lt;/a-checkbox&gt;//编写事件处理函数methods:{    ......    cbStateChanged(id,e){      //复选框状态改变时触发      const param = {        id:id,        status:e.target.checked      }      //根据id更改事项状态      this.$store.commit(&#39;changeStatus&#39;,param)    }  }</code></pre><p>然后打开store.js编写changeStatus</p><pre><code>export default new Vuex.Store({  ......  mutations: {    ........    changeStatus(state,param){      //根据id改变对应事项的状态      const index = state.list.findIndex( x =&gt; x.id === param.id )      if(index != -1) state.list[index].done = param.status    }  }  ......})</code></pre><h2 id="剩余项统计"><a href="#剩余项统计" class="headerlink" title="剩余项统计"></a>剩余项统计</h2><p>打开store.js，添加getters完成剩余项统计</p><pre><code>getters:{  unDoneLength(state){    const temp = state.list.filter( x =&gt; x.done === false )    console.log(temp)    return temp.length  }}</code></pre><p>打开App.vue，使用getters展示剩余项</p><pre><code>//使用映射好的计算属性展示剩余项&lt;!-- 未完成的任务个数 --&gt;&lt;span&gt;{{unDoneLength}}条剩余&lt;/span&gt;//导入gettersimport { mapState,mapGetters } from &#39;vuex&#39;//映射computed:{  ...mapState([&#39;list&#39;,&#39;inputValue&#39;]),  ...mapGetters([&#39;unDoneLength&#39;])}</code></pre><h2 id="清除完成事项"><a href="#清除完成事项" class="headerlink" title="清除完成事项"></a>清除完成事项</h2><p>首先，打开App.vue文件，给“清除已完成”按钮绑定点击事件，编写处理函数</p><pre><code>&lt;!-- 把已经完成的任务清空 --&gt;&lt;a @click=&quot;clean&quot;&gt;清除已完成&lt;/a&gt;//编写事件处理函数methods:{  ......  clean(){    //清除已经完成的事项    this.$store.commit(&#39;cleanDone&#39;)  }}</code></pre><p>然后打开store.js编写addItem</p><pre><code>export default new Vuex.Store({  ......  mutations: {    ........    cleanDone(state){      state.list = state.list.filter( x =&gt; x.done === false )    }  }  ......})</code></pre><h2 id="点击选项卡切换事项"><a href="#点击选项卡切换事项" class="headerlink" title="点击选项卡切换事项"></a>点击选项卡切换事项</h2><p>打开App.vue，给“全部”，“未完成”，“已完成”三个选项卡绑定点击事件，编写处理函数<br>并将列表数据来源更改为一个getters。</p><pre><code>&lt;a-list bordered :dataSource=&quot;infoList&quot; class=&quot;dt_list&quot;&gt;  ......  &lt;!-- 操作按钮 --&gt;  &lt;a-button-group&gt;    &lt;a-button :type=&quot;viewKey ===&#39;all&#39;?&#39;primary&#39;:&#39;default&#39;&quot; @click=&quot;changeList(&#39;all&#39;)&quot;&gt;全部&lt;/a-button&gt;    &lt;a-button :type=&quot;viewKey ===&#39;undone&#39;?&#39;primary&#39;:&#39;default&#39;&quot; @click=&quot;changeList(&#39;undone&#39;)&quot;&gt;未完成&lt;/a-button&gt;    &lt;a-button :type=&quot;viewKey ===&#39;done&#39;?&#39;primary&#39;:&#39;default&#39;&quot; @click=&quot;changeList(&#39;done&#39;)&quot;&gt;已完成&lt;/a-button&gt;  &lt;/a-button-group&gt;  ......&lt;/a-list&gt;//编写事件处理函数以及映射计算属性methods:{  ......  changeList( key ){    //点击“全部”，“已完成”，“未完成”时触发    this.$store.commit(&#39;changeKey&#39;,key)  }},computed:{  ...mapState([&#39;list&#39;,&#39;inputValue&#39;,&#39;viewKey&#39;]),  ...mapGetters([&#39;unDoneLength&#39;,&#39;infoList&#39;])}</code></pre><p>打开store.js，添加getters，mutations，state</p><pre><code>export default new Vuex.Store({  state: {    ......    //保存默认的选项卡值    viewKey:&#39;all&#39;  },  mutations: {    ......    changeKey(state,key){      //当用户点击“全部”，“已完成”，“未完成”选项卡时触发      state.viewKey = key    }  },  ......  getters:{    .......    infoList(state){      if(state.viewKey === &#39;all&#39;){        return state.list      }      if(state.viewKey === &#39;undone&#39;){        return state.list.filter( x =&gt; x.done === false )      }      if(state.viewKey === &#39;done&#39;){        return state.list.filter( x =&gt; x.done === true )      }    }  }})</code></pre>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何阅读一本书》——书评及内容纲要</title>
      <link href="/2020/08/05/default/how-to-read-book/"/>
      <url>/2020/08/05/default/how-to-read-book/</url>
      
        <content type="html"><![CDATA[<p>此文部分参考编程随想的<a href="https://program-think.blogspot.com/2013/04/how-to-read-book.html#head-5">书评</a></p><h2 id="阅读的层次"><a href="#阅读的层次" class="headerlink" title="阅读的层次"></a>阅读的层次</h2><p>此书的重点内容在于：介绍了4种阅读层次。</p><p>为啥称“层次”而不称“类型”，因为层次有“高低之分”，而且层次之间是递进关系而不是并列关系——上面的层次需要依赖下面层次的技能。</p><h3 id="基础阅读"><a href="#基础阅读" class="headerlink" title="基础阅读"></a>基础阅读</h3><p>顾名思义，这是最基本的阅读层次。在这个层次，只需要你做到“读懂书籍字面上的意思”。需要的技能仅仅是：识字、断句、联系上下文、等。</p><p>显然，列位看官都已经具备这个层次了——不具备这个层次的人，相当于半文盲。</p><p>对于这个层次，只是在第3章大概介绍了一下。因为咱们都不是学龄前儿童，所以这个层次不是重点。</p><h3 id="检视阅读"><a href="#检视阅读" class="headerlink" title="检视阅读"></a>检视阅读</h3><p>此书的第4章介绍“检视阅读”的各种技巧。</p><p>检视阅读有时候也可以称为“略读”。它要达到的目的就是：在非常有限的时间内，大致搞清楚一本书的内容和主题。</p><p>很多人可能看不起“略读”，其实这个技能是很有用滴。掌握这个技能，有助于你用尽可能短的时间，判断一本书的优劣。这样就避免在烂书上浪费太多时间。另外，在后续的“主题阅读”层次，也非常依赖“检视阅读”的能力。</p><h3 id="分析阅读"><a href="#分析阅读" class="headerlink" title="分析阅读"></a>分析阅读</h3><p>分析阅读有时候也可以称为“精读”。一看到“精读”这个词，你就晓得这是重要的技能了。显然，只有对有价值的书，才值得花力气做“分析阅读”。“烂书或平庸的书”是没有这种待遇的。</p><p>这本书花了大量的篇幅来介绍“分析阅读”。这部分是此书【重点中的重点】。</p><p>分析阅读包括如下几个阶段：</p><ul><li>第1阶段——这本书在谈些啥，主要在第7章介绍。这个阶段你需要做如下4件事情。</li></ul><ol><li>依照书本的种类与主题作分类。</li><li>用最简短的句子说出整本书在谈些什么。</li><li>按照顺序与关系，列出全书的重要部分。将全书的纲要拟出来之后，再将各个部分的纲要也一一列出。</li><li>找出作者在问的问题，或作者想要解决的问题。</li></ol><p>第2阶段——诠释整本书的内容，主要在第8章和第9章介绍。这个阶段你需要做如下4件事情。 </p><ol start="5"><li>找出重要的、关键性的词汇，透过它们与作者达成共识</li><li>从最重要的句子里抓出作者的重要主旨。</li><li>找出作者在论述些啥，重新架构这些论述的因果关系，以明白作者的主张。</li><li>搞清楚作者已经解决了哪些问题，还有哪些是未解决的。在未解决的问题中，哪些是作者认为自己无法解决的。</li></ol><p>第3阶段——评价这本书,主要在- 第10章和- 第11章介绍。</p><ol start="9"><li>除非你已掌握某本书的架构，也能诠释整本书了，否则不要轻易评论。</li><li>不要争强好胜，非辩到底不可。</li><li>在说出评论之前，你要能区分出书中的“事实”与“观点”</li></ol><p>如果要做出批评性的评价，需要做到如下几条之一：</p><ol><li>证明作者的知识不足。</li><li>证明作者的知识有误。</li><li>证明作者的逻辑错误（关于常见逻辑谬误，俺写过一篇扫盲，在“这里”）。</li><li>证明作者的分析与理由不够完整。</li></ol><p>另外，在- 第12章介绍了辅助阅读。包括利用外在的工具和资源（比如工具书，百科全书、字典、等）辅助阅读某本书。</p><h3 id="主题阅读"><a href="#主题阅读" class="headerlink" title="主题阅读"></a>主题阅读</h3><p>关于主题阅读，主要在第20章介绍。</p><p>所谓的“主题阅读”，通俗而言就是：为了研究某个主题，阅读跟该主题相关的多本书籍。这种阅读主要包括5个步骤：</p><ol><li>找到这几本书的相关章节，这时候，“检视阅读”又派上用场了。</li><li>带引作者与你达成共识这个步骤有点类似于“分析阅读”的第2阶段。</li><li>厘清问题：你可以列出一些问题，然后看看这几本书能否回答这些问题。</li><li>界定议题：如果几本不同的书籍都能够回答同一个问题，并且答案有差异。那么，你可以根据答案的差异、作者的情况、进而判断出这个问题的价值。比方说：如果某个问题，多本书的作者给出全然不同的答案，而且这几本书的作者在立场的客观性、分析的全面性、思维的深度等方面都足够。那么这个问题就是一个非常有价值的问题，值得深入思考。</li><li>分析讨论：找到有价值的问题之后，就需要通过自己的综合分析，思考一下：【为什么】这几本书的作者，对同一个问题会有不同的答案。如果你能想明白，那么你对该主题所处的领域，就有了更深刻的理解。</li></ol><h3 id="如何读不同类型的书籍"><a href="#如何读不同类型的书籍" class="headerlink" title="如何读不同类型的书籍"></a>如何读不同类型的书籍</h3><p>这本书的如下章节，分别介绍了具体类型的书籍，有哪些阅读技巧。</p><ul><li>第13章 如何阅读实用型的书</li><li>第14章 如何阅读想像文学</li><li>第15章 如何阅读故事、戏剧、诗歌</li><li>第16章 如何阅读历史书</li><li>第17章 如何阅读科学与数学</li><li>第18章 如何阅读哲学书</li><li>第19章 如何阅读社会科学</li></ul><h3 id="阅读与心智的成长"><a href="#阅读与心智的成长" class="headerlink" title="阅读与心智的成长"></a>阅读与心智的成长</h3><p>这是此书最后一章的内容，包括如下几个小节：</p><h4 id="好书能带来什么帮助？"><a href="#好书能带来什么帮助？" class="headerlink" title="好书能带来什么帮助？"></a>好书能带来什么帮助？</h4><p>前面介绍的，都是关于“如何更好地阅读”，但是书籍本身的好坏也很重要。关于好书的重要性，俺摘录一段：<br>读一本好书，却会让你的努力有所回报。最好的书对你的回馈也最多。当然，这样的回馈分成两种：第一，当你成功地阅读了一本难读的好书之后，你的阅读技巧必然增进了。第二（长期来说这一点更重要）一本好书能教你了解这个世界以及你自己。你不只更懂得如何读得更好，还更懂得生命。你变得更有智慧，而不只是更有知识—像只提供讯息的书所形成的那样。你会成为一位智者，对人类生命中永恒的真理有更深刻的体认。</p><p>请注意这段提到的两个词【知识】和【智慧】——只提供讯息的书，带给你“知识”；而真正的好书带给你“智慧”。至于消遣性的书，既不会给你知识，也不会给你智慧。</p><h4 id="书籍的金字塔"><a href="#书籍的金字塔" class="headerlink" title="书籍的金字塔"></a>书籍的金字塔</h4><p>书籍的好坏是符合【二八原理】滴！（俺曾经写过一个系列《无处不在的二八原理》）。关于书籍的金字塔，包括三层：</p><ul><li>第1层<blockquote><p>99% 的书籍对于你的能力提升是毫无帮助的。这 99% 里面，相当大一部分书是“消遣性”的，还有一些可能是跟你完全无关的领域。<br>　　显然，这些书籍是不需要进行“分析阅读”的。</p></blockquote></li><li>第2层<blockquote><p>这一层次的书籍，你至少要做一次完整的“分析阅读”。经过一次分析阅读之后，你基本上就“读通”了，知道这本书的主要精华。一旦读通，以后你就无需再去阅读。顶多是偶尔拿出来翻看个别重点，复习某些片段。</p></blockquote></li><li>第3层<blockquote><p>这一层次的书，非常非常少。它们的特点是：你无法通过一次完整的“分析阅读”，就把它读通。甚至有可能你进行了 N 次分析阅读，也无法尽其究竟。　　</p></blockquote></li></ul><h4 id="生命与心智的成长"><a href="#生命与心智的成长" class="headerlink" title="生命与心智的成长"></a>生命与心智的成长</h4><p>这一节有两段话，俺摘录如下（粗体是俺标注滴）。希望能激发大伙儿对思考的热情。</p><blockquote><p>人类的心智有很奇怪的一点，主要是这一点划分了我们心智与身体的截然不同。我们的身体是有限制的，心智却没有限制。其中一个迹象是，在力量与技巧上，身体不能无限制地成长。人们到了30岁左右，身体状况就达到了巅峰，随着时间的变化，身体的状况只有越来越恶化，而我们的头脑却能无限地成长与发展下去。我们的心智不会因为到了某个年纪死就停止成长，只有当大脑失去活力，僵化了，才会失去了增加技巧与理解力的力量。</p></blockquote><blockquote><p>这是人类最明显的特质，也是万物之灵与其他动物最主要不同之处。其他的动物似乎发展到某个层次之后，便不再有心智上的发展。但是人类独有的特质，却也潜藏着巨大的危险。心智就跟肌肉一样，如果不常运用就会萎缩。心智的萎缩就是在惩罚我们不经常动脑。这是个可怕的惩罚，因为证据显示，心智萎缩也可能要人的命。除此之外，似乎也没法说明为什么许多工作忙碌的人一旦退休之后就会立刻死亡。他们活着是因为工作对他们的心智上有所要求，那是一种人为的支撑力量，也就是外界的力量。一旦外界要求的力量消失之后，他们又没有内在的心智活动，他们便停止了思考，死亡也跟着来了。</p></blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>为了免去大伙儿买纸版书的开销和找电子书的麻烦，我特地放上此书的 EPUB 版。想下载的同学，请访问我分享的<a href="http://dwz.date/bPkw">电子书资源</a>的 list1 文件夹”。</p><p>看完之后，如果有啥心得体会，可以到本文留言。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书评：《少有人走的路——心智成熟的旅程》</title>
      <link href="/2020/08/04/default/road-less-traveled/"/>
      <url>/2020/08/04/default/road-less-traveled/</url>
      
        <content type="html"><![CDATA[<p>偶然看到编程随想关于《少有人走的路——心智成熟的旅程》的<a href="https://program-think.blogspot.com/2012/06/book-review-road-less-traveled.html">书评</a>，对我帮助很大。随想的书评很精彩，我本想不再写，但出于对「费曼学习法」的实践，于是有了这篇。</p><h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>下面稍微介绍一下本书的大致内容。</p><h3 id="第1部分：自律"><a href="#第1部分：自律" class="headerlink" title="第1部分：自律"></a>第1部分：自律</h3><blockquote><p>所谓自律，就是主动要求自己以积极的态度去承受痛苦，解决问题。</p></blockquote><p>我认为这是本书最重要的部分——因为建立【自律能力】，是达成心智成熟的关键。</p><p>缺乏“自律”的人，会一味地逃避问题，逃避痛苦。但是这样只是掩盖问题，而不能根本解决问题。那些逃避痛苦的人，最终会招致更大的痛苦；而建立了“自律”的人，就能够正视问题，直面痛苦，以积极的态度去解决问题。</p><p>那么，如何建立自律能力捏？作者指出了4个要点：</p><ul><li><p>推迟满足感</p><blockquote><p>就是不贪图暂时的安逸，先苦后甜，重新设置人生快乐与痛苦的次序：首先，面对问题并感受痛苦；然后，解决问题并享受更大的快乐。在充满问题和痛苦的人生中，推迟满足感是唯一可行的生活方式</p></blockquote></li><li><p>承担责任、</p><blockquote><p>不能及时解决自己面临的问题，这些问题就会像山一样横亘在我们心中，阻碍心灵的成长和心智的成熟。很多人显然忽略了这个道理。我们必须面对属于自己的问题，这是解决问题的基本前提。</p></blockquote></li><li><p>尊重事实</p><blockquote><p>逃避现实的痛苦是人类的天性，只有通过自律，我们才能逐渐克服现实的痛苦，及时修改自己的地图，逐步成长。我们必须忠于事实，尽管这会带来暂时的痛苦，但远比沉湎于虚假的舒适中要好。我们必须忍受暂时的不适感，追求事实而不是假象，并承受这一过程的痛苦。要让心灵获得成长，心智走向成熟，就要竭尽全力，不惜一切代价，完全忠于事实。</p></blockquote><blockquote><p>完全忠于事实的生活到底意味着什么呢？首先，<strong>它意味着我们要用一生的时间进行不间断地严格地自我反省</strong>。我们通过自身与外界的接触来认识世界。我们不仅要观察世界本身，也要对观察世界的主体（我们自身）进行反省。</p></blockquote></li><li><p>保持平衡</p><blockquote><p>你既要学会推迟满足感，先苦后甜，把眼光放远，同时又要尽可能过好当前的生活，让人生的快乐多于痛苦。换句话说，自律本身需要把持得当，我称之为“保持平衡”，这也是自律的第四条原则</p></blockquote></li></ul><h3 id="第2部分：爱"><a href="#第2部分：爱" class="headerlink" title="第2部分：爱"></a>第2部分：爱</h3><blockquote><p>爱，是为了促进自己和他人心智成熟，而不断拓展自我界限，实现自我完善的一种意愿。</p></blockquote><p>本书的第二部分，重点谈“爱”这个话题。（请注意，书中谈及的“爱”，是广义的。不要一看到这个字眼，就想到“性爱”）</p><p>“爱”这个词汇，虽然人人都听说过，但是很多人（包括成年人）对“爱”的含义有片面的理解甚至错误的理解。</p><p>举个“中国式父母”的例子：</p><ul><li>孩子5岁，我给你报了少年宫</li><li>孩子7岁，我给你报了奥数班</li><li>孩子15岁，我给你报了重点中学</li><li>孩子18岁，我给你报了高考突击班</li><li>孩子23岁，我给你报了公务员</li><li>孩子32岁，我给你报了《非诚勿扰》</li><li>……</li></ul><p>如果你问这类父母这么做的动机，他们多半会说：因为他们【爱】自己的孩子。</p><p>但其实捏，这些父母的上述举动，并不是源于真正的“爱”，而是源于【控制欲】——他们希望掌控孩子的成长轨迹。“爱”只不过是这类父母冠冕堂皇的借口而已。</p><p>那么，到底什么是真正的爱？请看书。</p><h3 id="第3部分：成长与宗教"><a href="#第3部分：成长与宗教" class="headerlink" title="第3部分：成长与宗教"></a>第3部分：成长与宗教</h3><p>谈到科学和宗教的关系，作者的如下几个观点，列出来供大伙儿参考：</p><blockquote><p>科学家成熟的标志之一就是能意识到，和其它任何宗教一样，科学也可能流于教条主义。我坚定地认为，对于别人教给我们的一切，包括通常的文化观念以及一切陈规旧习，采取冷静和怀疑的态度，才是使心智成熟不可或缺的元素。科学本身也很容易成为文化偶像，我们亦应保持怀疑的态度。</p></blockquote><blockquote><p>我们的思想可能很成熟，成熟到足以摆脱对上帝的信仰；与此同时，我们也可能成熟到去信仰上帝。</p></blockquote><h3 id="第4部分：神奇的力量"><a href="#第4部分：神奇的力量" class="headerlink" title="第4部分：神奇的力量"></a>第4部分：神奇的力量</h3><p>前面三部分提到的心智，都是“意识”层面的。最后这部分会讲到“潜意识”的问题以及“潜意识”和“意识”之间的互动。接着作者还谈到了两种力量（心灵的力量和政治的力量）。心灵的力量用于控制自己，政治的力量用于控制他人。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>为了免去大伙儿买纸版书的开销和找电子书的麻烦，我特地放上此书的 EPUB 版。想下载的同学，请访问我分享的<a href="https://onedrive.live.com/?authkey=%21AD54huiPIfQ2E6I&id=428F6BF2DDC9B1D0%211197&cid=428F6BF2DDC9B1D0">电子书资源</a>的 list1 文件夹”。</p><p>看完之后，如果有啥心得体会，可以到本文留言。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设定个人发展目标和计划</title>
      <link href="/2020/07/22/default/personal-plan/"/>
      <url>/2020/07/22/default/personal-plan/</url>
      
        <content type="html"><![CDATA[<p>大部分人从来没有【明确】地设定自己的发展目标，每天都是得过且过。等到几年过去了，才发现自己这些年啥也没学会，还是老样子，然后就感叹时光飞逝、岁月如梭。</p><p>因此，今天我们来聊一下如何设定个人发展目标。（如果你平时已经很善于定期设定个人发展目标并执行得很好，恭喜你，那么本帖子你可以略过）</p><h2 id="个人发展目标"><a href="#个人发展目标" class="headerlink" title="个人发展目标"></a>个人发展目标</h2><p>先说说什么是【个人发展目标】。顾名思义，就是和你个人的职业发展有关的目标，包括知识、技能、工作岗位等都可以被设定为个人发展目标。（由于本博客主要关注IT方面，因此我会以个人的技术发展为例来说明，但是这些方法也适用于其他方面，例如个人财务目标）</p><h2 id="个人发展目标的三种类型"><a href="#个人发展目标的三种类型" class="headerlink" title="个人发展目标的三种类型"></a>个人发展目标的三种类型</h2><p>我一般会把个人发展目标分为“长、中、短”三种类型，以此来对应不同的时间阶段。不管是哪种类型的目标，都要做到如下：</p><ol><li>要把目标设置得【难易适中】。太容易的目标对自己的成长帮助不够大；而太难的目标则容易中途放弃或者超出时间（导致打乱计划）。</li><li>设定的目标要尽量容易评估（否则到时候连自己也搞不清楚到底目标算不算已达到）。</li></ol><h3 id="短期目标"><a href="#短期目标" class="headerlink" title="短期目标"></a>短期目标</h3><p>先说说短期目标。短期目标的时间跨度大约在几个星期到一个季度之间。短期目标要定得比较具体，便于自己评估目标是否达成。</p><p>下面举几个短期目标的例子：“在本月读完《Thinking in C++》”、“在本月熟悉 Spring 框架”、“在这2个月用 C++ 写一个五子棋游戏”……</p><h3 id="中期目标"><a href="#中期目标" class="headerlink" title="中期目标"></a>中期目标</h3><p>然后说说中期目标。中期目标的时间跨度大约在几个季度到1-2年。中期目标比短期目标更抽象，且必须是短期目标的有机结合。</p><p>比如有个短期目标是“本周看完《Dive into Python》”，那么对应的中期目标可以是“1年内成为熟练的 Python 程序员”。</p><h3 id="长期目标"><a href="#长期目标" class="headerlink" title="长期目标"></a>长期目标</h3><p>最后谈谈长期目标。长期目标同样也必须和中级目标沾边，它的层次当然更高，时间跨度大约在5年以上。</p><p>而且长期目标一般不会关系到具体的XX语言、XX平台等，倒是经常和职业岗位有一定的关联。比如“5-7年内成为技术总监”、“5年内成为公司产品的架构师”等。</p><h2 id="个人发展计划"><a href="#个人发展计划" class="headerlink" title="个人发展计划"></a>个人发展计划</h2><p>当你把3种目标都设定好之后，就形成了【个人发展计划】。既然是计划，你就得在每一个阶段结束时自己总结一下，评估一下该目标的完成情况好不好，有什么收获、有什么经验教训。必要的话还需对尚未开始的后续目标进行一下调整。定期回顾还有一个好处，就是能获得一种满足感，从而有利于你坚持完整个计划。</p><p>关于“设定个人发展目标和计划”，今天就聊这么多。不管你是尚未毕业的在校生，还是已经工作多年的老员工（亡羊补牢还不晚），【从现在开始】，按照我上面说的，赶紧计划一下吧！</p><blockquote><p>本文转载自<a href="https://program-think.blogspot.com/2009/01/3.html">编程随想</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程随想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code使用记录</title>
      <link href="/2020/06/26/vs-code/"/>
      <url>/2020/06/26/vs-code/</url>
      
        <content type="html"><![CDATA[<p>最近由于痴迷于写 Markdown 文档，我爱上了 Visual Studio Code 这款编辑器，这篇文章将为你它的种种用途。为了方便以下简称 VS Code。</p><h2 id="用于写-Markdown"><a href="#用于写-Markdown" class="headerlink" title="用于写 Markdown"></a>用于写 Markdown</h2><p>VS Code 绝对是写 Markdown 的最佳编辑器，只是很多人不知道。网上众推的 Typora 编辑器不支持多标签浏览而且有时会卡顿，比较适合非程序员使用。</p><p>只需安装如图所示插件即可享用。上面那个扩展内置了一些快捷键及目录自动生成，还是挺方便的。下方扩展让实时预览以 GitHub 的风格显示，必备。<br><img src="http://theliuqi.oss-cn-shenzhen.aliyuncs.com/notes/20200624/214800550.png" alt="mark"><br>后来我动手写了一些 Snippet 来提高效率，比如我输入 md 再按回车就会生成我想要的 Markdown 文件的基本结构，这个技巧强烈推荐使用。</p><h2 id="用于项目提交"><a href="#用于项目提交" class="headerlink" title="用于项目提交"></a>用于项目提交</h2><p>VS Code 内置了控制台和对 Git 的支持，使得它几乎媲美 IDE。对于一名程序员来说，使用控制台和 Git 可说是最常用的功能之一，内置它们极大地提升了我的效率。具体用法可参考<a href="#参考阅读">官方文档</a>，此外，虽然纯英文文档一开始让人有不舒服的感觉，我还是建议要阅读官方文档，如果挺过去了，我们能获得英文水平、视野及自信心的提升，还是很划算的。</p><h2 id="用于编程"><a href="#用于编程" class="headerlink" title="用于编程"></a>用于编程</h2><p>建议安装官方推荐的扩展并查阅<a href="#参考阅读">官方文档</a>。VS Code 不是最好的编辑器，但它是最全能的编辑器。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ol><li><a href="https://code.visualstudio.com/docs">VS Code 官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL主从复制实战</title>
      <link href="/2020/05/27/mysql-master-slave/"/>
      <url>/2020/05/27/mysql-master-slave/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>刚开始是打算在Docker环境下开2个mysql实例来测试的,但遇到难以解决的bug,因此先在正常环境下搭建.</p><p>我用了虚拟机和vps两个centos7系统, mysql都是5.5.62版本.</p><h2 id="正常搭建"><a href="#正常搭建" class="headerlink" title="正常搭建"></a>正常搭建</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>在vps的mysql配置文件里增加如下信息:<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-binserver-id<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>改完重启.</li><li>在本地虚拟机的mysql配置文件里增加如下信息:<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment" spellcheck="true">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span>log-bin<span class="token operator">=</span>mysql-slave-binserver-id<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>改完也要重启.</li><li>创建数据同步用户：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-slave-binserver-id<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>创建数据同步用户:  <pre class="line-numbers language-bash"><code class="language-bash">CREATE USER <span class="token string">'slave'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span>GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="token string">'slave'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>查看主数据库状态：<code>show master status;</code>,记下<code>File</code>及<code>Position</code>的值以备用.</li><li>在从数据库中配置主从复制：<pre class="line-numbers language-bash"><code class="language-bash">change master to master_host<span class="token operator">=</span><span class="token string">'45.78.23.24'</span>, master_user<span class="token operator">=</span><span class="token string">'slave'</span>, master_password<span class="token operator">=</span><span class="token string">'123456'</span>, master_port<span class="token operator">=</span>3306, master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000241'</span>, master_log_pos<span class="token operator">=</span>1229, master_connect_retry<span class="token operator">=</span>30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>开启主从同步：<code>start slave;</code></li><li>查看主从同步状态：<code>show slave status;</code>,这俩参数为Yes说明成功了.<br><img src="/images/slave-io.jpg" alt="slave-io"></li><li>我们可以在主数据库建个数据库,然后发现从数据库也出现了.</li><li>最后将slave账号删掉,使用<code>Navicat</code>会比较快捷.<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>在搭建过程中我遇到了<code>Slave_IO_Running: No</code>的问题,百思不得其解,通过查看mysql错误日志，发现是mysql并没有更新server_id，于是执行<pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">set</span> global server_id<span class="token operator">=</span>2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#此处的数值和my.cnf里设置的一样就行</span>mysql<span class="token operator">></span> slave start<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>,便解决了问题.</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章</p><ul><li><a href="http://www.macrozheng.com/#/reference/mysql_master_slave">Docker-mysql主从复制</a></li><li><a href="https://blog.csdn.net/u013421629/article/details/78793966">csdn读写分离</a> </li><li><a href="https://www.jianshu.com/p/1ac435a6510e">MySQL读写分离最佳实践</a></li><li><a href="https://segmentfault.com/a/1190000003716617">读写分离-多赞</a></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>查容器IP,命令如下: </p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> <span class="token comment" spellcheck="true"># 查看所有容器</span>docker inspect -f <span class="token string">'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> ContainerID  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文技术文档的写作规范</title>
      <link href="/2020/05/06/document-style-guide/"/>
      <url>/2020/05/06/document-style-guide/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul><li>层级: 标题分为四级; 一级标题：文章的标题; 二级标题：文章主要部分的大标题.</li><li>避免同级标题只有一个</li><li>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）. 如<strong>（1）xx</strong></li></ul><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><ul><li>示例: 一部容量为 16 GB 的智能手机</li><li>避免使用长句: 不包含任何标点符号的单个句子，长度尽量保持在 20 个字以内</li><li>外文缩写可以使用半角圆点(<code>.</code>)表示缩写,如: U.S.A.</li><li>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）</li><li>英文书名或电影名改用中文表达时，双引号应改为书名号。</li><li>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。如: “American Association of Physicists in Medicine”</li></ul><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><ul><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li><li>段落开头不要留出空白字符。</li><li>如果是全篇转载，请在全文开头显著位置注明出处，并链接至原文。</li></ul><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h2><ul><li>数值为千位以上，应添加千分号, 如: 公司的实收资本为 ￥1,258,000 人民币</li></ul><h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><ul><li>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔, 不使用逗号.</li><li>中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接. 如: 我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</li><li>分号（<code>；</code>）表示复句内部并列分句之间的停顿。</li><li>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>）</li><li>补充说明时，使用全角圆括号（）</li><li>应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）</li><li>数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>）</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>文件名建议只使用小写字母，不使用大写字母。如: reading-list.md</li></ul><blockquote><p>本文部分参考自阮一峰的<a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a> </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Document-Style </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Docker命令</title>
      <link href="/2020/05/05/docker-commands/"/>
      <url>/2020/05/05/docker-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p>Docker 是一个开源的应用容器引擎, 让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上。使用Docker可以更方便低打包、测试以及部署应用程序。</p><h3 id="Docker-环境安装"><a href="#Docker-环境安装" class="headerlink" title="Docker 环境安装"></a>Docker 环境安装</h3><p><strong>建议要体验Docker, 应采用虚拟机+ centos7 + Xshell 结合使用最佳.</strong></p><ul><li>安装yum-utils: <code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></li><li>为yum源添加docker仓库位置：<code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li><li>安装docker: <code>yum install docker-ce</code></li><li>启动docker:  <code>systemctl start docker</code></li><li>开机自动启动docker: <code>systemctl enable docker</code> # 我之前遇到”Is the docker daemon running?”的问题,运行该命令并重启即可解决</li></ul><h3 id="Docker-镜像常用命令"><a href="#Docker-镜像常用命令" class="headerlink" title="Docker 镜像常用命令"></a>Docker 镜像常用命令</h3><p>搜索镜像: <code>docker search mysql</code> # 要通过docker hub来搜索支持的版本。</p><p>下载镜像: <code>docker pull mysql:5.7</code></p><p>列出镜像: <code>docker images</code></p><p>指定名称删除镜像（强制）: <code>docker rmi -f java:8</code></p><p>删除所有没有引用的镜像: </p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi `docker images <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制删除所有镜像: <code>docker rmi -f $(docker images)</code></p><h3 id="Docker-容器常用命令"><a href="#Docker-容器常用命令" class="headerlink" title="Docker 容器常用命令"></a>Docker 容器常用命令</h3><p>新建并启动容器: <code>docker run -p 80:80 --name nginx -d nginx:1.17.0</code> # -d选项：表示后台运行; –name选项：指定运行后容器的名字为nginx,之后可以通过名字来操作容器; -p选项：指定端口映射，格式为：hostPort:containerPort</p><p>列出所有容器: <code>docker ps -a</code></p><p>停止容器: <code>docker stop $ContainerName/$ContainerId</code></p><p>强制停止容器: <code>docker kill $ContainerName/$ContainerId</code></p><p>启动已停止的容器: <code>docker start $ContainerName/$ContainerId</code></p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>先查询容器的pid:</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker inspect --format <span class="token string">"{{.State.Pid}}"</span> <span class="token variable">$ContainerName</span>/<span class="token variable">$ContainerId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据容器的pid进入容器: <code>nsenter --target &quot;$pid&quot; --mount --uts --ipc --net --pid</code></li></ul><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><ul><li>删除指定容器: <code>docker rm $ContainerName(或者$ContainerId)</code></li><li>按名称删除容器:<pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> `docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> php-* <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>强制删除所有容器: <code>docker rm -f $(docker ps -a -q)</code></li></ul><p>动态查看容器日志: <code>docker logs $ContainerName(或者$ContainerId) -f</code></p><p>查看容器的IP地址: </p><pre class="line-numbers language-bash"><code class="language-bash">docker inspect --format <span class="token string">'{{ .NetworkSettings.IPAddress }}'</span> <span class="token variable">$ContainerName</span>/<span class="token variable">$ContainerId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改容器的启动方式: <code>docker container update --restart=always $ContainerName</code></p><p>同步宿主主机时间到容器: <code>docker cp /etc/localtime $ContainerName(或者$ContainerId):/etc/</code></p><p>查看指定容器情况: <code>docker stats $ContainerName/$ContainerId</code> # -a表所有</p><p>查看Docker磁盘使用情况: <code>docker system df</code></p><p>进入Docker容器内部的bash: <code>docker exec -it $ContainerName /bin/bash</code></p><h3 id="修改Docker镜像的存放位置"><a href="#修改Docker镜像的存放位置" class="headerlink" title="修改Docker镜像的存放位置"></a>修改Docker镜像的存放位置</h3><ul><li>查看Docker镜像的存放位置: <code>docker info | grep &quot;Docker Root Dir&quot;</code></li><li>关闭Docker服务: <code>systemctl stop docker</code></li><li>移动目录到目标路径：<code>mv /var/lib/docker /mydata/docker</code></li><li>建立软连接: <code>ln -s /mydata/docker /var/lib/docker</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2020/04/21/default/container-with-most-water/"/>
      <url>/2020/04/21/default/container-with-most-water/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">题目</a></h1><p>求最大水容器，给定一个包含正整数的数组，a1，a2，…，an。每个元素都可以呈现成一个点(i，ai)。过每个点，做垂直于x轴的垂线，得到对应交点(0，ai)。(0，ai)和(i，ai)构成一条之前。每条直线两两组合，构成一个储水容器，找到存储量最大的那个容器。</p><p><strong>举例：</strong></p><pre class="line-numbers language-stylus"><code class="language-stylus">Input：<span class="token punctuation">[</span>1,3,5<span class="token punctuation">]</span><span class="token punctuation">(</span>0,1<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>1,1<span class="token punctuation">)</span><span class="token punctuation">(</span>0,3<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>2,3<span class="token punctuation">)</span><span class="token punctuation">(</span>0,5<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>3,5<span class="token punctuation">)</span>Output：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入是[1,3,5]，那么一共有三条垂直与x轴的直线，直线两两组合，面积最大为3。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最大盛水量取决于两边中较短的那条边，而且如果将较短的边换为更短边的话，盛水量只会变少。所以我们可以用两个头尾指针，计算出当前最大的盛水量后，将较短的边向中间移，因为我们想看看能不能把较短的边换长一点。这样一直计算到左边大于右边为止就行了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        area_tmp <span class="token operator">=</span> <span class="token number">0</span>        area_max <span class="token operator">=</span> <span class="token number">0</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            min_height <span class="token operator">=</span> min<span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> min_height            <span class="token keyword">if</span> area_tmp <span class="token operator">></span> area_max<span class="token punctuation">:</span>                area_max <span class="token operator">=</span> area_tmp            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> area_max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">?</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>area_tmp <span class="token operator">></span> area_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                area_max <span class="token operator">=</span> area_tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> area_max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><strong>PHP</strong></h2><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[] $height     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">&lt;</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$min_height</span> <span class="token operator">=</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$right</span> <span class="token operator">-</span> <span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$min_height</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$area_tmp</span> <span class="token operator">></span> <span class="token variable">$area_max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token variable">$area_tmp</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$left</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$right</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$area_max</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Linux命令</title>
      <link href="/2019/05/02/linux-commands/"/>
      <url>/2019/05/02/linux-commands/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=3932159&auto=1&height=66"></iframe></div><h3 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h3><ul><li>输出系统中各个服务的状态：<code>systemctl list-units --type=service</code></li><li>查看服务的运行状态：<code>systemctl status firewalld</code></li><li>关闭服务: <code>systemctl stop firewalld</code></li><li>重新启动服务: <code>systemctl restart firewalld</code></li><li>重新载入配置信息而不中断服务: <code>systemctl reload firewalld</code></li><li>禁止服务开机自启动：<code>systemctl disable firewalld</code></li><li>设置服务开机自启动：<code>systemctl enable firewalld</code></li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ol><li><p><code>cd -</code><strong>：</strong> 切换到上一个操作所在目录</p></li><li><p><code>ll</code>: ll是ls -l的别名，ll命令可以看到该目录下的所有目录和文件的详细信息</p></li><li><p><code>pwd</code>: 获取目前所在工作目录的绝对路径</p></li><li><p>显示或修改系统时间与日期: <code>date &#39;+%Y-%m-%d %H:%M:%S&#39;</code></p></li><li><p>用于设置用户密码: <code>pass root</code></p></li><li><p>改变用户身份（切换到超级用户): <code>su -</code></p></li><li><p>用于清除屏幕信息: <code>clear</code></p></li><li><p>显示指定命令的帮助信息: <code>man ls</code></p></li><li><p>查询系统处于什么运行级别: <code>who -r</code> </p></li><li><p>显示目前登录到系统的用户: <code>who -buT</code></p></li><li><p>显示系统内存状态（单位MB): <code>free -m</code></p></li><li><p>查看sshd进程的运行动态：<code>ps -ef | grep sshd</code></p></li><li><p>查看即时活跃的进程，类似Windows的任务管理器: <code>top</code></p></li><li><p>创建目录: <code>mkdir</code></p></li><li><p>用于文件过长时分页查看文件内容 每页10行查看boot.log文件: <code>more -c -10 /var/log/boot.log</code></p></li><li><p>查看Linux启动日志文件文件，并标明行号：<code>cat -Ab /var/log/boot.log</code></p></li><li><p><strong><code>touch 文件名称</code>:</strong> 创建文件</p></li><li><p><code>rm -rf 目录</code>: 删除目录及其子目录</p></li><li><p><strong><code>cp -r 目录名称 目录拷贝的目标位置</code>：</strong> 拷贝目录（改），-r代表递归拷贝</p></li><li><p><strong><code>mv 目录名称 新目录名称</code>：</strong> 重命名/剪切</p></li><li><p><strong><code>find 目录 参数</code>：</strong> 寻找目录（查）</p><ul><li><p>搜索etc目录下所有以sh开头的文件,参考<a href="https://man.linuxde.net/locate_slocate">locate</a>:<code>locate /etc/sh</code> 注: 使用yum install mlocate 安装locate命令,再运行updatedb</p></li><li><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件: <code>find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</code></p></li></ul></li></ol><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><ol><li>将/etc文件夹中的文件归档到文件etc.tar（并不会进行压缩): <code>tar -cvf /mydata/etc.tar /etc</code></li><li>用gzip压缩文件夹/etc中的文件到文件etc.tar.gz: <code>tar -zcvf /mydata/etc.tar.gz /etc</code></li><li>用bzip2压缩文件夹/etc到文件/etc.tar.bz2：<code>tar -jcvf /mydata/etc.tar.bz2 /etc</code></li><li>分页查看压缩包中内容（gzip）：<code>tar -ztvf /mydata/etc.tar.gz |more -c -10</code></li><li>解压文件到指定目录（gzip）：<code>tar -zxvf /mydata/etc.tar.gz -C /mydata/etc</code></li></ol><h3 id="磁盘和网络管理"><a href="#磁盘和网络管理" class="headerlink" title="磁盘和网络管理"></a>磁盘和网络管理</h3><ol><li>查看磁盘空间占用情况：<code>df -hT</code></li><li>查看当前目录下的文件及文件夹所占大小：<code>du -h --max-depth=1 ./*</code></li><li>显示当前网络接口状态: <code>ifconfig</code></li><li>查看当前路由信息：<code>netstat -rn</code></li><li>查看所有有效TCP连接：<code>netstat -an</code></li><li>查看系统中启动的监听服务：<code>netstat -tulnp</code></li><li>查看处于连接状态的系统资源信息：<code>netstat -atunp</code></li><li>从网络上下载文件: <code>wget</code></li></ol><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><ol><li>安装上传下载工具: <code>yum install -y lrzsz</code></li><li>上传文件: <code>rz</code></li><li>下载文件: <code>sz fileName</code></li></ol><h3 id="软件的安装与管理"><a href="#软件的安装与管理" class="headerlink" title="软件的安装与管理"></a>软件的安装与管理</h3><p>rpm</p><ul><li>安装软件包：rpm -ivh nginx-1.12.2-2.el7.x86_64.rpm</li><li>模糊搜索软件包：rpm -qa | grep nginx</li><li>精确查找软件包：rpm -qa nginx</li><li>查询软件包的安装路径：rpm -ql nginx-1.12.2-2.el7.x86_64</li><li>查看软件包的概要信息：rpm -qi nginx-1.12.2-2.el7.x86_64</li><li>验证软件包内容和安装文件是否一致：rpm -V nginx-1.12.2-2.el7.x86_64</li><li>更新软件包：rpm -Uvh nginx-1.12.2-2.el7.x86_64</li><li>删除软件包：rpm -e nginx-1.12.2-2.el7.x86_64</li></ul><p>yum</p><ul><li>安装软件包： yum install nginx</li><li>检查可以更新的软件包：yum check-update</li><li>更新指定的软件包：yum update nginx</li><li>在资源库中查找软件包信息：yum info nginx*</li><li>列出已经安装的所有软件包：yum info installed</li><li>列出软件包名称：yum list nginx*</li><li>模糊搜索软件包：yum search nginx</li></ul><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ul><li><a href="https://man.linuxde.net/">Linux命令大全web版</a></li><li><a href="https://pan.baidu.com/s/1tPDuG6NEahO0cwZtzTktOg">网盘</a>: 提取码：twsu, 目前包含<code>Linux命令大全手册.chm, 鸟哥的Linux私房菜.pdf</code></li><li>本文参考<a href="http://www.macrozheng.com/#/reference/linux">必备Linux命令</a>,<a href="https://snailclimb.gitee.io/javaguide/#/docs/operating-system/linux">Linux基础</a>. </li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
