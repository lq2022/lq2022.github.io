<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git入门</title>
      <link href="/2020/04/27/git/"/>
      <url>/2020/04/27/git/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我觉得只要自己觉得舒服,不论是用Git客户端还是Soucetree等三方软件都是ok的.</p><p>本文主要是简单介绍Git及Git常用操作,如对Git完全不了解,请移步<a href="https://zh.wikipedia.org/wiki/Git" target="_blank" rel="noopener">维基百科</a>.</p><h1 id="认识Git"><a href="#认识Git" class="headerlink" title="认识Git"></a>认识Git</h1><h2 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h2><p>Git 有三种状态，你的文件可能处于其中之一：</p><ol><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><p>由此引入 Git 项目的三个工作区域的概念：<strong>Git 仓库(.git directoty)</strong>、<strong>工作目录(Working Directory)</strong> 以及 <strong>暂存区域(Staging Area)</strong> 。</p><p><strong>基本的 Git 工作流程如下：</strong></p><ol><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li></ol><h1 id="Git使用快速入门"><a href="#Git使用快速入门" class="headerlink" title="Git使用快速入门"></a>Git使用快速入门</h1><h2 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h2><p>有两种取得 Git 项目仓库的方法。</p><ol><li><p>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</p></li><li><p>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url]</code> directoryname</p></li></ol><h2 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h2><pre><code>  1. **检测当前文件状态** : `git status`  2. **提出更改（把它们添加到暂存区**）：`git add filename` (针对特定文件)、`git add *`(所有文件)、`git add *.txt`（支持通配符，所有 .txt 文件）  3. **忽略文件**：`.gitignore` 文件  4. **提交更新:** `git commit -m &quot;代码提交信息&quot;` （每次准备提交前，先用 `git status` 看下，是不是都已暂存起来了， 然后再运行提交命令 `git commit`）  5. **跳过使用暂存区域更新的方式** : `git commit -a -m &quot;代码提交信息&quot;`。 `git commit` 加上 `-a` 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 `git add` 步骤。  6. **移除文件** ：`git rm filename` （从暂存区域移除，然后提交。）  7. **对文件重命名** ：`git mv README.md README`(这个命令相当于`mv README.md README`、`git rm README.md`、`git add README` 这三条命令的集合)</code></pre><h2 id="推送改动到远程仓库"><a href="#推送改动到远程仓库" class="headerlink" title="推送改动到远程仓库"></a>推送改动到远程仓库</h2><ul><li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<code>git remote add origin &lt;server&gt;</code> ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样<code>git remote add origin https://github.com/theliuqi/test.git</code></p></li><li><p>将这些改动提交到远端仓库：<code>git push origin master</code> (可以把 <em>master</em> 换成你想要推送的任何分支)</p><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p></li></ul><h2 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h2><ul><li>将 test 重命名位 test1：<code>git remote rename test test1</code></li><li>移除远程仓库 test1:<code>git remote rm test1</code></li></ul><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p><code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。</p><p><strong>可以添加一些参数来查看自己希望看到的内容：</strong></p><p>只看某个人的提交记录：</p><pre class="line-numbers language-shell"><code class="language-shell">git log --author=bob<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p><pre class="line-numbers language-console"><code class="language-console">git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消暂存的文件</p><pre class="line-numbers language-console"><code class="language-console">git reset filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>撤消对文件的修改:</p><pre><code>git checkout -- filename</code></pre><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><pre><code>git fetch origingit reset --hard origin/master</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p>我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。</p><p>创建一个名字叫做 test 的分支</p><pre class="line-numbers language-console"><code class="language-console">git branch test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）</p><pre class="line-numbers language-console"><code class="language-console">git checkout test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以直接这样创建分支并切换过去(上面两条命令的合写)</p><pre class="line-numbers language-console"><code class="language-console">git checkout -b test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到主分支</p><pre><code>git checkout master</code></pre><p>合并分支(可能会有冲突)</p><pre class="line-numbers language-java"><code class="language-java"> git merge test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把新建的分支删掉</p><pre><code>git branch -d test1</code></pre><p>将分支推送到远端仓库（推送成功后其他人可见）：</p><pre><code>git push origin </code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2020/04/21/container-with-most-water/"/>
      <url>/2020/04/21/container-with-most-water/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>求最大水容器，给定一个包含正整数的数组，a1，a2，…，an。每个元素都可以呈现成一个点(i，ai)。过每个点，做垂直于x轴的垂线，得到对应交点(0，ai)。(0，ai)和(i，ai)构成一条之前。每条直线两两组合，构成一个储水容器，找到存储量最大的那个容器。</p><p><strong>举例：</strong></p><pre class="line-numbers language-stylus"><code class="language-stylus">Input：<span class="token punctuation">[</span>1,3,5<span class="token punctuation">]</span><span class="token punctuation">(</span>0,1<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>1,1<span class="token punctuation">)</span><span class="token punctuation">(</span>0,3<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>2,3<span class="token punctuation">)</span><span class="token punctuation">(</span>0,5<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>3,5<span class="token punctuation">)</span>Output：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入是[1,3,5]，那么一共有三条垂直与x轴的直线，直线两两组合，面积最大为3。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最大盛水量取决于两边中较短的那条边，而且如果将较短的边换为更短边的话，盛水量只会变少。所以我们可以用两个头尾指针，计算出当前最大的盛水量后，将较短的边向中间移，因为我们想看看能不能把较短的边换长一点。这样一直计算到左边大于右边为止就行了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        area_tmp <span class="token operator">=</span> <span class="token number">0</span>        area_max <span class="token operator">=</span> <span class="token number">0</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            min_height <span class="token operator">=</span> min<span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> min_height            <span class="token keyword">if</span> area_tmp <span class="token operator">></span> area_max<span class="token punctuation">:</span>                area_max <span class="token operator">=</span> area_tmp            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> area_max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">?</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>area_tmp <span class="token operator">></span> area_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                area_max <span class="token operator">=</span> area_tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> area_max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><strong>PHP</strong></h2><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[] $height     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">&lt;</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$min_height</span> <span class="token operator">=</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$right</span> <span class="token operator">-</span> <span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$min_height</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$area_tmp</span> <span class="token operator">></span> <span class="token variable">$area_max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token variable">$area_tmp</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$left</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$right</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$area_max</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Linux命令</title>
      <link href="/2019/05/02/linux-commands/"/>
      <url>/2019/05/02/linux-commands/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=3932159&auto=1&height=66"></iframe></div><h3 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h3><ul><li>输出系统中各个服务的状态：<code>systemctl list-units --type=service</code></li><li>查看服务的运行状态：<code>systemctl status firewalld</code></li><li>关闭服务: <code>systemctl stop firewalld</code></li><li>重新启动服务: <code>systemctl restart firewalld</code></li><li>重新载入配置信息而不中断服务: <code>systemctl reload firewalld</code></li><li>禁止服务开机自启动：<code>systemctl disable firewalld</code></li><li>设置服务开机自启动：<code>systemctl enable firewalld</code></li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ol><li><p><code>cd -</code><strong>：</strong> 切换到上一个操作所在目录</p></li><li><p><code>ll</code>: ll是ls -l的别名，ll命令可以看到该目录下的所有目录和文件的详细信息</p></li><li><p><code>pwd</code>: 获取目前所在工作目录的绝对路径</p></li><li><p>显示或修改系统时间与日期: <code>date &#39;+%Y-%m-%d %H:%M:%S&#39;</code></p></li><li><p>用于设置用户密码: <code>pass root</code></p></li><li><p>改变用户身份（切换到超级用户): <code>su -</code></p></li><li><p>用于清除屏幕信息: <code>clear</code></p></li><li><p>显示指定命令的帮助信息: <code>man ls</code></p></li><li><p>查询系统处于什么运行级别: <code>who -r</code> </p></li><li><p>显示目前登录到系统的用户: <code>who -buT</code></p></li><li><p>显示系统内存状态（单位MB): <code>free -m</code></p></li><li><p>查看sshd进程的运行动态：<code>ps -ef | grep sshd</code></p></li><li><p>查看即时活跃的进程，类似Windows的任务管理器: <code>top</code></p></li><li><p>创建目录: <code>mkdir</code></p></li><li><p>用于文件过长时分页查看文件内容 每页10行查看boot.log文件: <code>more -c -10 /var/log/boot.log</code></p></li><li><p>查看Linux启动日志文件文件，并标明行号：<code>cat -Ab /var/log/boot.log</code></p></li><li><p><strong><code>touch 文件名称</code>:</strong> 创建文件</p></li><li><p><code>rm -rf 目录</code>: 删除目录及其子目录</p></li><li><p><strong><code>cp -r 目录名称 目录拷贝的目标位置</code>：</strong> 拷贝目录（改），-r代表递归拷贝</p></li><li><p><strong><code>mv 目录名称 新目录名称</code>：</strong> 重命名/剪切</p></li><li><p><strong><code>find 目录 参数</code>：</strong> 寻找目录（查）</p><ul><li><p>搜索etc目录下所有以sh开头的文件,参考<a href="https://man.linuxde.net/locate_slocate" target="_blank" rel="noopener">locate</a>:<code>locate /etc/sh</code> 注: 使用yum install mlocate 安装locate命令,再运行updatedb</p></li><li><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件: <code>find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</code></p></li></ul></li></ol><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><ol><li>将/etc文件夹中的文件归档到文件etc.tar（并不会进行压缩): <code>tar -cvf /mydata/etc.tar /etc</code></li><li>用gzip压缩文件夹/etc中的文件到文件etc.tar.gz: <code>tar -zcvf /mydata/etc.tar.gz /etc</code></li><li>用bzip2压缩文件夹/etc到文件/etc.tar.bz2：<code>tar -jcvf /mydata/etc.tar.bz2 /etc</code></li><li>分页查看压缩包中内容（gzip）：<code>tar -ztvf /mydata/etc.tar.gz |more -c -10</code></li><li>解压文件到指定目录（gzip）：<code>tar -zxvf /mydata/etc.tar.gz -C /mydata/etc</code></li></ol><h3 id="磁盘和网络管理"><a href="#磁盘和网络管理" class="headerlink" title="磁盘和网络管理"></a>磁盘和网络管理</h3><ol><li>查看磁盘空间占用情况：<code>df -hT</code></li><li>查看当前目录下的文件及文件夹所占大小：<code>du -h --max-depth=1 ./*</code></li><li>显示当前网络接口状态: <code>ifconfig</code></li><li>查看当前路由信息：<code>netstat -rn</code></li><li>查看所有有效TCP连接：<code>netstat -an</code></li><li>查看系统中启动的监听服务：<code>netstat -tulnp</code></li><li>查看处于连接状态的系统资源信息：<code>netstat -atunp</code></li><li>从网络上下载文件: <code>wget</code></li></ol><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><ol><li>安装上传下载工具: <code>yum install -y lrzsz</code></li><li>上传文件: <code>rz</code></li><li>下载文件: <code>sz fileName</code></li></ol><h3 id="软件的安装与管理"><a href="#软件的安装与管理" class="headerlink" title="软件的安装与管理"></a>软件的安装与管理</h3><p>rpm</p><ul><li>安装软件包：rpm -ivh nginx-1.12.2-2.el7.x86_64.rpm</li><li>模糊搜索软件包：rpm -qa | grep nginx</li><li>精确查找软件包：rpm -qa nginx</li><li>查询软件包的安装路径：rpm -ql nginx-1.12.2-2.el7.x86_64</li><li>查看软件包的概要信息：rpm -qi nginx-1.12.2-2.el7.x86_64</li><li>验证软件包内容和安装文件是否一致：rpm -V nginx-1.12.2-2.el7.x86_64</li><li>更新软件包：rpm -Uvh nginx-1.12.2-2.el7.x86_64</li><li>删除软件包：rpm -e nginx-1.12.2-2.el7.x86_64</li></ul><p>yum</p><ul><li>安装软件包： yum install nginx</li><li>检查可以更新的软件包：yum check-update</li><li>更新指定的软件包：yum update nginx</li><li>在资源库中查找软件包信息：yum info nginx*</li><li>列出已经安装的所有软件包：yum info installed</li><li>列出软件包名称：yum list nginx*</li><li>模糊搜索软件包：yum search nginx</li></ul><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ul><li><a href="https://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全web版</a></li><li><a href="https://pan.baidu.com/s/1tPDuG6NEahO0cwZtzTktOg" target="_blank" rel="noopener">网盘</a>: 提取码：twsu, 目前包含<code>Linux命令大全手册.chm, 鸟哥的Linux私房菜.pdf</code></li><li>本文部分参考[必备Linux命令](</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
