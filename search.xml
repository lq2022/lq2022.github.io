<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vscode使用记录</title>
      <link href="/2020/06/26/vscode/"/>
      <url>/2020/06/26/vscode/</url>
      
        <content type="html"><![CDATA[<p>最近由于痴迷于写 Markdown 文档，我爱上了 Visual Studio Code 这款编辑器，这篇文章将为你它的种种用途。为了方便以下简称 Vscode。</p><h2 id="用于写-Markdown"><a href="#用于写-Markdown" class="headerlink" title="用于写 Markdown"></a>用于写 Markdown</h2><p>Vscode 绝对是写 Markdown 的最佳编辑器，只是很多人不知道。网上众推的 Typora 编辑器不支持多标签浏览而且有时会卡顿，比较适合非程序员使用。</p><p>只需安装如图所示插件即可享用。上面那个扩展内置了一些快捷键及目录自动生成，还是挺方便的。下方扩展让实时预览以 GitHub 的风格显示，必备。<br><img src="http://theliuqi.oss-cn-shenzhen.aliyuncs.com/notes/20200624/214800550.png" alt="mark"><br>后来我动手写了一些 Snippet 来提高效率，比如我输入 md 再按回车就会生成我想要的 Markdown 文件的基本结构，这个技巧强烈推荐使用。</p><h2 id="用于项目提交"><a href="#用于项目提交" class="headerlink" title="用于项目提交"></a>用于项目提交</h2><p>Vscode 内置了控制台和对 Git 的支持，使得它几乎媲美 IDE。对于一名程序员来说，使用控制台和 Git 可说是最常用的功能之一，内置它们极大地提升了我的效率。具体用法可参考<a href="#参考阅读">官方文档</a>，此外，虽然纯英文文档一开始让人有不舒服的感觉，我还是建议要阅读官方文档，如果挺过去了，我们能获得英文水平、视野及自信心的提升，还是很划算的。</p><h2 id="用于编程"><a href="#用于编程" class="headerlink" title="用于编程"></a>用于编程</h2><p>建议安装官方推荐的扩展并查阅<a href="#参考阅读">官方文档</a>。Vscode 不是最好的编辑器，但它是最全能的编辑器。</p><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ol><li><a href="https://code.visualstudio.com/docs">Vscode 官方文档</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从复制实战</title>
      <link href="/2020/05/27/mysql-master-slave/"/>
      <url>/2020/05/27/mysql-master-slave/</url>
      
        <content type="html"><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>刚开始是打算在Docker环境下开2个mysql实例来测试的,但遇到难以解决的bug,因此先在正常环境下搭建.</p><p>我用了虚拟机和vps两个centos7系统, mysql都是5.5.62版本.</p><h2 id="正常搭建"><a href="#正常搭建" class="headerlink" title="正常搭建"></a>正常搭建</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>在vps的mysql配置文件里增加如下信息:<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-binserver-id<span class="token operator">=</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>改完重启.</li><li>在本地虚拟机的mysql配置文件里增加如下信息:<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span><span class="token comment" spellcheck="true">## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span>log-bin<span class="token operator">=</span>mysql-slave-binserver-id<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>改完也要重启.</li><li>创建数据同步用户：<pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>log-bin<span class="token operator">=</span>mysql-slave-binserver-id<span class="token operator">=</span>2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>创建数据同步用户:  <pre class="line-numbers language-bash"><code class="language-bash">CREATE USER <span class="token string">'slave'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'123456'</span><span class="token punctuation">;</span>GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO <span class="token string">'slave'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>查看主数据库状态：<code>show master status;</code>,记下<code>File</code>及<code>Position</code>的值以备用.</li><li>在从数据库中配置主从复制：<pre class="line-numbers language-bash"><code class="language-bash">change master to master_host<span class="token operator">=</span><span class="token string">'45.78.23.24'</span>, master_user<span class="token operator">=</span><span class="token string">'slave'</span>, master_password<span class="token operator">=</span><span class="token string">'123456'</span>, master_port<span class="token operator">=</span>3306, master_log_file<span class="token operator">=</span><span class="token string">'mysql-bin.000241'</span>, master_log_pos<span class="token operator">=</span>1229, master_connect_retry<span class="token operator">=</span>30<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>开启主从同步：<code>start slave;</code></li><li>查看主从同步状态：<code>show slave status;</code>,这俩参数为Yes说明成功了.<br><img src="slave-io.jpg" alt="slave-io"></li><li>我们可以在主数据库建个数据库,然后发现从数据库也出现了.</li><li>最后将slave账号删掉,使用<code>Navicat</code>会比较快捷.<h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3>在搭建过程中我遇到了<code>Slave_IO_Running: No</code>的问题,百思不得其解,通过查看mysql错误日志,<br><img src="slave-error.jpg" alt="slave-error">发现是mysql并没有更新server_id,于是执行<pre class="line-numbers language-bash"><code class="language-bash">mysql<span class="token operator">></span> <span class="token keyword">set</span> global server_id<span class="token operator">=</span>2<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#此处的数值和my.cnf里设置的一样就行</span>mysql<span class="token operator">></span> slave start<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>,便解决了问题.</li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文章</p><ul><li><a href="http://www.macrozheng.com/#/reference/mysql_master_slave">Docker-mysql主从复制</a></li><li><a href="https://blog.csdn.net/u013421629/article/details/78793966">csdn读写分离</a> </li><li><a href="https://www.jianshu.com/p/1ac435a6510e">MySQL读写分离最佳实践</a></li><li><a href="https://segmentfault.com/a/1190000003716617">读写分离-多赞</a></li></ul><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>查容器IP,命令如下: </p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">ps</span> <span class="token comment" spellcheck="true"># 查看所有容器</span>docker inspect -f <span class="token string">'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> ContainerID  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中文技术文档的写作规范</title>
      <link href="/2020/05/06/document-style-guide/"/>
      <url>/2020/05/06/document-style-guide/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文摘录自<a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="noopener">中文技术文档的写作规范</a> </p></blockquote><ul><li><p>标题</p><ul><li><p>层级: 标题分为四级; 一级标题：文章的标题; 二级标题：文章主要部分的大标题.</p></li><li><p>避免同级标题只有一个</p></li><li><p>如果三级标题下有并列性的内容，建议只使用项目列表（Item list）. 如<strong>（1）xx</strong></p></li></ul></li><li><p>文本</p><ul><li>示例: 一部容量为 16 GB 的智能手机</li><li>避免使用长句: 不包含任何标点符号的单个句子, 长度尽量保持在 20 个字以内</li><li>外文缩写可以使用半角圆点(<code>.</code>)表示缩写,如: U.S.A.</li><li>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）</li><li>英文书名或电影名改用中文表达时，双引号应改为书名号。</li><li>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。如: “American Association of Physicists in Medicine”</li></ul></li><li><p>段落</p><ul><li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li><li>段落开头不要留出空白字符。</li><li>如果是全篇转载，请在全文开头显著位置注明出处，并链接至原文。</li></ul></li><li><p>数值</p><ul><li>数值为千位以上，应添加千分号, 如: 公司的实收资本为 ￥1,258,000 人民币</li></ul></li><li><p>标点符号</p><ul><li>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔, 不使用逗号.</li><li>中文句子内部的并列词，最后一个尽量使用（<code>和</code>）来连接. 如: 我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</li><li>分号（<code>；</code>）表示复句内部并列分句之间的停顿。</li><li>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>）</li><li>补充说明时，使用全角圆括号（）</li><li>应该使用平静的语气叙述，尽量避免使用感叹号（<code>！</code>）</li><li>数值范围（例如日期、时间或数字）应该使用波浪连接号（<code>～</code>）</li></ul></li><li><p>其他</p><ul><li>文件名建议只使用小写字母，不使用大写字母。如: reading-list.md</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Document-Style </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Docker命令</title>
      <link href="/2020/05/05/docker-commands/"/>
      <url>/2020/05/05/docker-commands/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p>Docker 是一个开源的应用容器引擎, 让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows机器上。使用Docker可以更方便低打包、测试以及部署应用程序。</p><h3 id="Docker-环境安装"><a href="#Docker-环境安装" class="headerlink" title="Docker 环境安装"></a>Docker 环境安装</h3><p><strong>建议要体验Docker, 应采用虚拟机+ centos7 + Xshell 结合使用最佳.</strong></p><ul><li>安装yum-utils: <code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></li><li>为yum源添加docker仓库位置：<code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></li><li>安装docker: <code>yum install docker-ce</code></li><li>启动docker:  <code>systemctl start docker</code></li><li>开机自动启动docker: <code>systemctl enable docker</code> # 我之前遇到”Is the docker daemon running?”的问题,运行该命令并重启即可解决</li></ul><h3 id="Docker-镜像常用命令"><a href="#Docker-镜像常用命令" class="headerlink" title="Docker 镜像常用命令"></a>Docker 镜像常用命令</h3><p>搜索镜像: <code>docker search mysql</code> # 要通过docker hub来搜索支持的版本。</p><p>下载镜像: <code>docker pull mysql:5.7</code></p><p>列出镜像: <code>docker images</code></p><p>指定名称删除镜像（强制）: <code>docker rmi -f java:8</code></p><p>删除所有没有引用的镜像: </p><pre class="line-numbers language-bash"><code class="language-bash">docker rmi `docker images <span class="token operator">|</span> <span class="token function">grep</span> none <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$3</span>}'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>强制删除所有镜像: <code>docker rmi -f $(docker images)</code></p><h3 id="Docker-容器常用命令"><a href="#Docker-容器常用命令" class="headerlink" title="Docker 容器常用命令"></a>Docker 容器常用命令</h3><p>新建并启动容器: <code>docker run -p 80:80 --name nginx -d nginx:1.17.0</code> # -d选项：表示后台运行; –name选项：指定运行后容器的名字为nginx,之后可以通过名字来操作容器; -p选项：指定端口映射，格式为：hostPort:containerPort</p><p>列出所有容器: <code>docker ps -a</code></p><p>停止容器: <code>docker stop $ContainerName/$ContainerId</code></p><p>强制停止容器: <code>docker kill $ContainerName/$ContainerId</code></p><p>启动已停止的容器: <code>docker start $ContainerName/$ContainerId</code></p><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><ul><li>先查询容器的pid:</li></ul><pre class="line-numbers language-bash"><code class="language-bash">docker inspect --format <span class="token string">"{{.State.Pid}}"</span> <span class="token variable">$ContainerName</span>/<span class="token variable">$ContainerId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>根据容器的pid进入容器: <code>nsenter --target &quot;$pid&quot; --mount --uts --ipc --net --pid</code></li></ul><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><ul><li>删除指定容器: <code>docker rm $ContainerName(或者$ContainerId)</code></li><li>按名称删除容器:<pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">rm</span> `docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> php-* <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span>`<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>强制删除所有容器: <code>docker rm -f $(docker ps -a -q)</code></li></ul><p>动态查看容器日志: <code>docker logs $ContainerName(或者$ContainerId) -f</code></p><p>查看容器的IP地址: </p><pre class="line-numbers language-bash"><code class="language-bash">docker inspect --format <span class="token string">'{{ .NetworkSettings.IPAddress }}'</span> <span class="token variable">$ContainerName</span>/<span class="token variable">$ContainerId</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改容器的启动方式: <code>docker container update --restart=always $ContainerName</code></p><p>同步宿主主机时间到容器: <code>docker cp /etc/localtime $ContainerName(或者$ContainerId):/etc/</code></p><p>查看指定容器情况: <code>docker stats $ContainerName/$ContainerId</code> # -a表所有</p><p>查看Docker磁盘使用情况: <code>docker system df</code></p><p>进入Docker容器内部的bash: <code>docker exec -it $ContainerName /bin/bash</code></p><h3 id="修改Docker镜像的存放位置"><a href="#修改Docker镜像的存放位置" class="headerlink" title="修改Docker镜像的存放位置"></a>修改Docker镜像的存放位置</h3><ul><li>查看Docker镜像的存放位置: <code>docker info | grep &quot;Docker Root Dir&quot;</code></li><li>关闭Docker服务: <code>systemctl stop docker</code></li><li>移动目录到目标路径：<code>mv /var/lib/docker /mydata/docker</code></li><li>建立软连接: <code>ln -s /mydata/docker /var/lib/docker</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git入门</title>
      <link href="/2020/04/27/git/"/>
      <url>/2020/04/27/git/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我觉得只要自己觉得舒服,不论是用Git客户端还是Soucetree等三方软件都是ok的.</p><p>本文主要是简单介绍Git及Git常用操作,如对Git完全不了解,请移步<a href="https://zh.wikipedia.org/wiki/Git">维基百科</a>.</p><h1 id="认识Git"><a href="#认识Git" class="headerlink" title="认识Git"></a>认识Git</h1><h2 id="Git-的三种状态"><a href="#Git-的三种状态" class="headerlink" title="Git 的三种状态"></a>Git 的三种状态</h2><p>Git 有三种状态，你的文件可能处于其中之一：</p><ol><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><p>由此引入 Git 项目的三个工作区域的概念：<strong>Git 仓库(.git directoty)</strong>、<strong>工作目录(Working Directory)</strong> 以及 <strong>暂存区域(Staging Area)</strong> 。</p><p><strong>基本的 Git 工作流程如下：</strong></p><ol><li>在工作目录中修改文件。</li><li>暂存文件，将文件的快照放入暂存区域。</li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li></ol><h1 id="Git使用快速入门"><a href="#Git使用快速入门" class="headerlink" title="Git使用快速入门"></a>Git使用快速入门</h1><h2 id="获取Git仓库"><a href="#获取Git仓库" class="headerlink" title="获取Git仓库"></a>获取Git仓库</h2><p>有两种取得 Git 项目仓库的方法。</p><ol><li><p>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</p></li><li><p>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url]</code> directoryname</p></li></ol><h2 id="记录每次更新到仓库"><a href="#记录每次更新到仓库" class="headerlink" title="记录每次更新到仓库"></a>记录每次更新到仓库</h2><pre><code>  1. **检测当前文件状态** : `git status`  2. **提出更改（把它们添加到暂存区**）：`git add filename` (针对特定文件)、`git add *`(所有文件)、`git add *.txt`（支持通配符，所有 .txt 文件）  3. **忽略文件**：`.gitignore` 文件  4. **提交更新:** `git commit -m &quot;代码提交信息&quot;` （每次准备提交前，先用 `git status` 看下，是不是都已暂存起来了， 然后再运行提交命令 `git commit`）  5. **跳过使用暂存区域更新的方式** : `git commit -a -m &quot;代码提交信息&quot;`。 `git commit` 加上 `-a` 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 `git add` 步骤。  6. **移除文件** ：`git rm filename` （从暂存区域移除，然后提交。）  7. **对文件重命名** ：`git mv README.md README`(这个命令相当于`mv README.md README`、`git rm README.md`、`git add README` 这三条命令的集合)</code></pre><h2 id="推送改动到远程仓库"><a href="#推送改动到远程仓库" class="headerlink" title="推送改动到远程仓库"></a>推送改动到远程仓库</h2><ul><li><p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：<code>git remote add origin &lt;server&gt;</code> ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样<code>git remote add origin https://github.com/theliuqi/test.git</code></p></li><li><p>将这些改动提交到远端仓库：<code>git push origin master</code> (可以把 <em>master</em> 换成你想要推送的任何分支)</p><p>如此你就能够将你的改动推送到所添加的服务器上去了。</p></li></ul><h2 id="远程仓库的移除与重命名"><a href="#远程仓库的移除与重命名" class="headerlink" title="远程仓库的移除与重命名"></a>远程仓库的移除与重命名</h2><ul><li>将 test 重命名位 test1：<code>git remote rename test test1</code></li><li>移除远程仓库 test1:<code>git remote rm test1</code></li></ul><h2 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h2><p><code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。</p><p><strong>可以添加一些参数来查看自己希望看到的内容：</strong></p><p>只看某个人的提交记录：</p><pre class="line-numbers language-shell"><code class="language-shell">git log --author=bob<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="撤销操作"><a href="#撤销操作" class="headerlink" title="撤销操作"></a>撤销操作</h2><p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p><pre class="line-numbers language-console"><code class="language-console">git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>取消暂存的文件</p><pre class="line-numbers language-console"><code class="language-console">git reset filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>撤消对文件的修改:</p><pre><code>git checkout -- filename</code></pre><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><pre><code>git fetch origingit reset --hard origin/master</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p>我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。</p><p>创建一个名字叫做 test 的分支</p><pre class="line-numbers language-console"><code class="language-console">git branch test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）</p><pre class="line-numbers language-console"><code class="language-console">git checkout test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你也可以直接这样创建分支并切换过去(上面两条命令的合写)</p><pre class="line-numbers language-console"><code class="language-console">git checkout -b test1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>切换到主分支</p><pre><code>git checkout master</code></pre><p>合并分支(可能会有冲突)</p><pre class="line-numbers language-java"><code class="language-java"> git merge test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把新建的分支删掉</p><pre><code>git branch -d test1</code></pre><p>将分支推送到远端仓库（推送成功后其他人可见）：</p><pre><code>git push origin </code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盛最多水的容器</title>
      <link href="/2020/04/21/other/container-with-most-water/"/>
      <url>/2020/04/21/other/container-with-most-water/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a><a href="https://leetcode-cn.com/problems/container-with-most-water/">题目</a></h1><p>求最大水容器，给定一个包含正整数的数组，a1，a2，…，an。每个元素都可以呈现成一个点(i，ai)。过每个点，做垂直于x轴的垂线，得到对应交点(0，ai)。(0，ai)和(i，ai)构成一条之前。每条直线两两组合，构成一个储水容器，找到存储量最大的那个容器。</p><p><strong>举例：</strong></p><pre class="line-numbers language-stylus"><code class="language-stylus">Input：<span class="token punctuation">[</span>1,3,5<span class="token punctuation">]</span><span class="token punctuation">(</span>0,1<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>1,1<span class="token punctuation">)</span><span class="token punctuation">(</span>0,3<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>2,3<span class="token punctuation">)</span><span class="token punctuation">(</span>0,5<span class="token punctuation">)</span> -> <span class="token punctuation">(</span>3,5<span class="token punctuation">)</span>Output：3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入是[1,3,5]，那么一共有三条垂直与x轴的直线，直线两两组合，面积最大为3。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>最大盛水量取决于两边中较短的那条边，而且如果将较短的边换为更短边的话，盛水量只会变少。所以我们可以用两个头尾指针，计算出当前最大的盛水量后，将较短的边向中间移，因为我们想看看能不能把较短的边换长一点。这样一直计算到左边大于右边为止就行了</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type height: List[int]        :rtype: int        """</span>        area_tmp <span class="token operator">=</span> <span class="token number">0</span>        area_max <span class="token operator">=</span> <span class="token number">0</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> len<span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>            min_height <span class="token operator">=</span> min<span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> min_height            <span class="token keyword">if</span> area_tmp <span class="token operator">></span> area_max<span class="token punctuation">:</span>                area_max <span class="token operator">=</span> area_tmp            <span class="token keyword">if</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">:</span>                left <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">-=</span> <span class="token number">1</span>        <span class="token keyword">return</span> area_max<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C"><a href="#C" class="headerlink" title="C++"></a><strong>C++</strong></h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> area_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            area_tmp <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">?</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">:</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>area_tmp <span class="token operator">></span> area_max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                area_max <span class="token operator">=</span> area_tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> area_max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><strong>PHP</strong></h2><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param Integer[] $height     * @return Integer     */</span>    <span class="token keyword">function</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">&lt;</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$min_height</span> <span class="token operator">=</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$area_tmp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$right</span> <span class="token operator">-</span> <span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token variable">$min_height</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$area_tmp</span> <span class="token operator">></span> <span class="token variable">$area_max</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token variable">$area_max</span> <span class="token operator">=</span> <span class="token variable">$area_tmp</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$left</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$height</span><span class="token punctuation">[</span><span class="token variable">$right</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$left</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$right</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$area_max</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发者必备Linux命令</title>
      <link href="/2019/05/02/linux-commands/"/>
      <url>/2019/05/02/linux-commands/</url>
      
        <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=3932159&auto=1&height=66"></iframe></div><h3 id="系统服务管理"><a href="#系统服务管理" class="headerlink" title="系统服务管理"></a>系统服务管理</h3><ul><li>输出系统中各个服务的状态：<code>systemctl list-units --type=service</code></li><li>查看服务的运行状态：<code>systemctl status firewalld</code></li><li>关闭服务: <code>systemctl stop firewalld</code></li><li>重新启动服务: <code>systemctl restart firewalld</code></li><li>重新载入配置信息而不中断服务: <code>systemctl reload firewalld</code></li><li>禁止服务开机自启动：<code>systemctl disable firewalld</code></li><li>设置服务开机自启动：<code>systemctl enable firewalld</code></li></ul><h3 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h3><ol><li><p><code>cd -</code><strong>：</strong> 切换到上一个操作所在目录</p></li><li><p><code>ll</code>: ll是ls -l的别名，ll命令可以看到该目录下的所有目录和文件的详细信息</p></li><li><p><code>pwd</code>: 获取目前所在工作目录的绝对路径</p></li><li><p>显示或修改系统时间与日期: <code>date &#39;+%Y-%m-%d %H:%M:%S&#39;</code></p></li><li><p>用于设置用户密码: <code>pass root</code></p></li><li><p>改变用户身份（切换到超级用户): <code>su -</code></p></li><li><p>用于清除屏幕信息: <code>clear</code></p></li><li><p>显示指定命令的帮助信息: <code>man ls</code></p></li><li><p>查询系统处于什么运行级别: <code>who -r</code> </p></li><li><p>显示目前登录到系统的用户: <code>who -buT</code></p></li><li><p>显示系统内存状态（单位MB): <code>free -m</code></p></li><li><p>查看sshd进程的运行动态：<code>ps -ef | grep sshd</code></p></li><li><p>查看即时活跃的进程，类似Windows的任务管理器: <code>top</code></p></li><li><p>创建目录: <code>mkdir</code></p></li><li><p>用于文件过长时分页查看文件内容 每页10行查看boot.log文件: <code>more -c -10 /var/log/boot.log</code></p></li><li><p>查看Linux启动日志文件文件，并标明行号：<code>cat -Ab /var/log/boot.log</code></p></li><li><p><strong><code>touch 文件名称</code>:</strong> 创建文件</p></li><li><p><code>rm -rf 目录</code>: 删除目录及其子目录</p></li><li><p><strong><code>cp -r 目录名称 目录拷贝的目标位置</code>：</strong> 拷贝目录（改），-r代表递归拷贝</p></li><li><p><strong><code>mv 目录名称 新目录名称</code>：</strong> 重命名/剪切</p></li><li><p><strong><code>find 目录 参数</code>：</strong> 寻找目录（查）</p><ul><li><p>搜索etc目录下所有以sh开头的文件,参考<a href="https://man.linuxde.net/locate_slocate">locate</a>:<code>locate /etc/sh</code> 注: 使用yum install mlocate 安装locate命令,再运行updatedb</p></li><li><p>当前目录及子目录下查找所有以.txt和.pdf结尾的文件: <code>find . -name &quot;*.txt&quot; -o -name &quot;*.pdf&quot;</code></p></li></ul></li></ol><h3 id="压缩与解压"><a href="#压缩与解压" class="headerlink" title="压缩与解压"></a>压缩与解压</h3><ol><li>将/etc文件夹中的文件归档到文件etc.tar（并不会进行压缩): <code>tar -cvf /mydata/etc.tar /etc</code></li><li>用gzip压缩文件夹/etc中的文件到文件etc.tar.gz: <code>tar -zcvf /mydata/etc.tar.gz /etc</code></li><li>用bzip2压缩文件夹/etc到文件/etc.tar.bz2：<code>tar -jcvf /mydata/etc.tar.bz2 /etc</code></li><li>分页查看压缩包中内容（gzip）：<code>tar -ztvf /mydata/etc.tar.gz |more -c -10</code></li><li>解压文件到指定目录（gzip）：<code>tar -zxvf /mydata/etc.tar.gz -C /mydata/etc</code></li></ol><h3 id="磁盘和网络管理"><a href="#磁盘和网络管理" class="headerlink" title="磁盘和网络管理"></a>磁盘和网络管理</h3><ol><li>查看磁盘空间占用情况：<code>df -hT</code></li><li>查看当前目录下的文件及文件夹所占大小：<code>du -h --max-depth=1 ./*</code></li><li>显示当前网络接口状态: <code>ifconfig</code></li><li>查看当前路由信息：<code>netstat -rn</code></li><li>查看所有有效TCP连接：<code>netstat -an</code></li><li>查看系统中启动的监听服务：<code>netstat -tulnp</code></li><li>查看处于连接状态的系统资源信息：<code>netstat -atunp</code></li><li>从网络上下载文件: <code>wget</code></li></ol><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><ol><li>安装上传下载工具: <code>yum install -y lrzsz</code></li><li>上传文件: <code>rz</code></li><li>下载文件: <code>sz fileName</code></li></ol><h3 id="软件的安装与管理"><a href="#软件的安装与管理" class="headerlink" title="软件的安装与管理"></a>软件的安装与管理</h3><p>rpm</p><ul><li>安装软件包：rpm -ivh nginx-1.12.2-2.el7.x86_64.rpm</li><li>模糊搜索软件包：rpm -qa | grep nginx</li><li>精确查找软件包：rpm -qa nginx</li><li>查询软件包的安装路径：rpm -ql nginx-1.12.2-2.el7.x86_64</li><li>查看软件包的概要信息：rpm -qi nginx-1.12.2-2.el7.x86_64</li><li>验证软件包内容和安装文件是否一致：rpm -V nginx-1.12.2-2.el7.x86_64</li><li>更新软件包：rpm -Uvh nginx-1.12.2-2.el7.x86_64</li><li>删除软件包：rpm -e nginx-1.12.2-2.el7.x86_64</li></ul><p>yum</p><ul><li>安装软件包： yum install nginx</li><li>检查可以更新的软件包：yum check-update</li><li>更新指定的软件包：yum update nginx</li><li>在资源库中查找软件包信息：yum info nginx*</li><li>列出已经安装的所有软件包：yum info installed</li><li>列出软件包名称：yum list nginx*</li><li>模糊搜索软件包：yum search nginx</li></ul><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><ul><li><a href="https://man.linuxde.net/">Linux命令大全web版</a></li><li><a href="https://pan.baidu.com/s/1tPDuG6NEahO0cwZtzTktOg">网盘</a>: 提取码：twsu, 目前包含<code>Linux命令大全手册.chm, 鸟哥的Linux私房菜.pdf</code></li><li>本文参考<a href="http://www.macrozheng.com/#/reference/linux">必备Linux命令</a>,<a href="https://snailclimb.gitee.io/javaguide/#/docs/operating-system/linux">Linux基础</a>. </li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
